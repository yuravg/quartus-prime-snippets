# -*- mode: snippet -*-
# name: qpp-M18x19_full-Single-Multiplier-with-Preadder-and-Coefficent-using-ACLR
# key: qpp-DSP-Features-for-10-nm-Device-M18x19_full-Single-Multiplier-with-Preadder-and-Coefficent-using-ACLR
# group: qpp DSP-Features-for-10-nm-Device
# --
// M18x19_full Single Multiplier with Preadder and Coefficent using ACLR
// Quartus Prime Verilog Template
// m18x19_full mode by utilizing half a DSP block resource
// Single multiplier with full registers (input, 2 pipeline stages and output) using asynchronous clear + preadder + coefficients
// Formula: final_output[t] = (a[t-4]+b[t-4])*c_coef[t-4]
//    Note: This mode does not support chainout adder nor dynamic ACCUMULATE/LOADCONST/SUB/NEGATE.
// For use with 10-nm device families
// All registers support asynchronous or synchronous clear but all registers within the same design must use the same clear type
// When synchronous clear is used, the ena signal has a higher priority than the clear signal
// Synchronizer register identification is disabled in all registers used in this template to ensure the DSP block's internal registers are fully packed for maximum DSP performance (fMAX). Ensure proper timing constraints are done if this template is used in asynchronous clock domains to avoid potential metastability issue. For more information on managing metastability in Quartus, refer to https://www.altera.co.jp/ja_JP/pdfs/literature/hb/qts/qts_qii51018.pdf

module m18x19_single_mult_full_regs_preadd_coef_10nm #(
	// This template will only work within the AxB data width range from 2x2 to 18x19.
	parameter AB_WIDTH = 18, COEF_WIDTH = 18,
	// up to 8 coefficients (3-bit address)
	parameter SEL_WIDTH = 3
) (
	// Data input ports
	input signed [AB_WIDTH-1:0] a,
	input signed [AB_WIDTH-1:0] b,

	// Coefficient selection ports. Selection of up to 8 coefficients (3-bit address)
	input [SEL_WIDTH-1:0] c_sel,

	// Register clock and control signals
	// DSP supports single clock, 3 ena and 2 async reset signals
	input clock,
	input ena1,
	input ena2,
	input ena3,
	input aclr1,
	input aclr2,

	// Output signal
	// Max output width is 64
	output signed [AB_WIDTH+COEF_WIDTH:0] final_output
);

	// Coefficient storage (ROM inferencing template)
	reg signed [COEF_WIDTH-1:0] c_coef[2**SEL_WIDTH-1:0];

	// Coefficient selection result
	wire signed [COEF_WIDTH-1:0] c_coef_wire;

	// Preadder result
	wire signed [AB_WIDTH:0] ab;

	// Input Register
	(* altera_attribute = {" -name SYNCHRONIZER_IDENTIFICATION OFF "} *) reg signed [AB_WIDTH-1:0] a_reg;
	(* altera_attribute = {" -name SYNCHRONIZER_IDENTIFICATION OFF "} *) reg signed [AB_WIDTH-1:0] b_reg;
	(* altera_attribute = {" -name SYNCHRONIZER_IDENTIFICATION OFF "} *) reg signed [SEL_WIDTH-1:0] c_sel_reg;

	// Input Pipeline Register
	(* altera_attribute = {" -name SYNCHRONIZER_IDENTIFICATION OFF "} *) reg signed [AB_WIDTH-1:0] a_pipeline1_reg;
	(* altera_attribute = {" -name SYNCHRONIZER_IDENTIFICATION OFF "} *) reg signed [AB_WIDTH-1:0] b_pipeline1_reg;
	(* altera_attribute = {" -name SYNCHRONIZER_IDENTIFICATION OFF "} *) reg signed [SEL_WIDTH-1:0] c_sel_pipeline1_reg;

	// Second Pipeline Register
	(* altera_attribute = {" -name SYNCHRONIZER_IDENTIFICATION OFF "} *) reg signed [AB_WIDTH-1:0] a_pipeline2_reg;
	(* altera_attribute = {" -name SYNCHRONIZER_IDENTIFICATION OFF "} *) reg signed [AB_WIDTH-1:0] b_pipeline2_reg;
	(* altera_attribute = {" -name SYNCHRONIZER_IDENTIFICATION OFF "} *) reg signed [SEL_WIDTH-1:0] c_sel_pipeline2_reg;

	// Output Register
	(* altera_attribute = {" -name SYNCHRONIZER_IDENTIFICATION OFF "} *) reg signed [AB_WIDTH+COEF_WIDTH:0] final_output_reg;

	// Data Input register
	// DSP supports single clock, 3 ena and 2 async reset signals
	// When preadder is used, the inputs to the preadder must use the same ena signal
	// The coefficient select input may use a different ena signal than that of the preadder inputs.
	// All registered inputs must use the same reset
	always @(posedge clock or posedge aclr1) begin
		if (aclr1) begin
			a_reg <= 0;
			b_reg <= 0;
			c_sel_reg <= 0;
		end else if (ena1) begin
			a_reg <= a;
			b_reg <= b;
			c_sel_reg <= c_sel;
		end
	end

	// Input pipeline register
	// All input pipeline registers must use the same {ena, reset}
	// The input pipeline register bank must use the same reset as the second pipeline and output register banks
	always @(posedge clock or posedge aclr2) begin
		if (aclr2) begin
			a_pipeline1_reg <= 0;
			b_pipeline1_reg <= 0;
			c_sel_pipeline1_reg <= 0;
		end else if (ena2) begin
			a_pipeline1_reg <= a_reg;
			b_pipeline1_reg <= b_reg;
			c_sel_pipeline1_reg <= c_sel_reg;
		end
	end

	// Second pipeline register
	// All second pipeline registers must use the same {ena, reset}
	// The second pipeline register bank must use the same reset as the input pipeline and output register banks
	always @(posedge clock or posedge aclr2) begin
		if (aclr2) begin
			a_pipeline2_reg <= 0;
			b_pipeline2_reg <= 0;
			c_sel_pipeline2_reg <= 0;
		end else if (ena2) begin
			a_pipeline2_reg <= a_pipeline1_reg;
			b_pipeline2_reg <= b_pipeline1_reg;
			c_sel_pipeline2_reg <= c_sel_pipeline1_reg;
		end
	end

	// Output register
	// The output register bank must share the same reset with input pipeline and second pipeline register banks
	always @(posedge clock or posedge aclr2) begin
		if (aclr2) begin
			final_output_reg <= 0;
		end else if (ena3) begin
			// Static add/sub is supported
			final_output_reg <= (c_coef_wire * ab);
		end
	end

	// Preadder
	// Preadder supports static add/sub
	assign ab = a_pipeline2_reg + b_pipeline2_reg;

	// Coefficients
	initial
	begin
		c_coef[0] = 18'b110101111001110100;
		c_coef[1] = 18'b001010100111101011;
		c_coef[2] = 18'b001010111111101011;
		c_coef[3] = 18'b101010111111101011;
		c_coef[4] = 18'b001010000011010110;
		c_coef[5] = 18'b111010110000001011;
		c_coef[6] = 18'b001010111111010111;
		c_coef[7] = 18'b001010111111101011;

	end

	assign c_coef_wire = c_coef[c_sel_pipeline2_reg];

	// Final output
	assign final_output = final_output_reg;


endmodule
