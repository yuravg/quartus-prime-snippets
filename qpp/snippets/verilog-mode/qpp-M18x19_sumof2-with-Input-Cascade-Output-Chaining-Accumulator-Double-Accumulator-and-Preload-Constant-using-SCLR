# -*- mode: snippet -*-
# name: qpp-M18x19_sumof2-with-Input-Cascade-Output-Chaining-Accumulator-Double-Accumulator-and-Preload-Constant-using-SCLR
# key: qpp-DSP-Features-for-10-nm-Device-M18x19_sumof2-with-Input-Cascade-Output-Chaining-Accumulator-Double-Accumulator-and-Preload-Constant-using-SCLR
# --
// M18x19_sumof2 with Input Cascade, Output Chaining, Accumulator, Double Accumulator and Preload Constant using SCLR
// Quartus Prime Verilog Template
// Two 'sum of two 18x19 multipliers' with full registers (input, 2 pipeline stages and output) using synchronous clear + input cascade chain (and input delay register) + chainout adder + accumulate + double accumulate + preload constant
// Formula: final_output[t] = acc_sel + a1[t-5]*b1[t-5] + a2[t-5]*b1[t-6] + a3[t-4]*b1[t-7] + a4[t-4]*b1[t-8]
//          where acc_sel = final_output[t-2] or preload_value or 0 depending on dynamic control inputs "accum" and "loadconst"
// For use with 10-nm device families
// All registers support asynchronous or synchronous clear but all registers within the same design must use the same clear type
// When synchronous clear is used, the ena signal has a higher priority than the clear signal
// Synchronizer register identification is disabled in all registers used in this template to ensure the DSP block's internal registers are fully packed for maximum DSP performance (fMAX). Ensure proper timing constraints are done if this template is used in asynchronous clock domains to avoid potential metastability issue. For more information on managing metastability in Quartus, refer to https://www.altera.co.jp/ja_JP/pdfs/literature/hb/qts/qts_qii51018.pdf

module m18x19_sum_of_2_full_regs_inputcascade_chainoutadder_acc_doubleacc_preloadConst_sclr_10nm #(
	// This template will only work within the AxB data width range from 2x2 to 18x19.s
	parameter A_WIDTH = 18, B_WIDTH = 19,
	// PRELOAD_VALUE should be a value of 2 to the power of N, where N is less than 64
	// thus it should contain only one bit '1' and '0' for others
	parameter PRELOAD_VALUE = 'h400,
	// Maximum chain width is 64
	parameter CHAIN_WIDTH = 64,
	// Double accumulation enable control parameter
	parameter enable_double_accum = "TRUE"
) (
	// Data input ports
	input signed [A_WIDTH-1:0] a1,
	input signed [A_WIDTH-1:0] a2,
	input signed [A_WIDTH-1:0] a3,
	input signed [A_WIDTH-1:0] a4,
	input signed [B_WIDTH-1:0] b1,

	// Register clock and control signals
	// DSP supports single clock, 3 ena and 2 sync reset signals
	input clock,
	input ena1,
	input ena2,
	input ena3,
	input sclr1,
	input sclr2,

	// Dynamic ACCUMULATE and LOADCONST control signals
	input accum,
	input loadconst,

	// Output signal
	// Max output width for chaining is 64
	output signed [CHAIN_WIDTH-1:0] final_output
);

	// Multiplier Result
	wire signed [A_WIDTH+B_WIDTH-1:0] m1, m2, m3, m4;

	// Data Input Register
	(* altera_attribute = {" -name SYNCHRONIZER_IDENTIFICATION OFF "} *) reg signed [A_WIDTH-1:0] a1_reg, a2_reg, a3_reg, a4_reg;
	(* altera_attribute = {" -name SYNCHRONIZER_IDENTIFICATION OFF "} *) reg signed [B_WIDTH-1:0] b1_reg, b2_reg, b3_reg, b4_reg;

	// Data Input Cascade Delay register
	(* altera_attribute = {" -name SYNCHRONIZER_IDENTIFICATION OFF "} *) reg signed [B_WIDTH-1:0] b2_delay_reg;

	// Data Input Pipeline Register
	(* altera_attribute = {" -name SYNCHRONIZER_IDENTIFICATION OFF "} *) reg signed [A_WIDTH-1:0] a1_pipeline1_reg, a2_pipeline1_reg, a3_pipeline1_reg, a4_pipeline1_reg;
	(* altera_attribute = {" -name SYNCHRONIZER_IDENTIFICATION OFF "} *) reg signed [B_WIDTH-1:0] b1_pipeline1_reg, b2_pipeline1_reg, b3_pipeline1_reg, b4_pipeline1_reg;

	// Data Input Second Pipeline Register
	(* altera_attribute = {" -name SYNCHRONIZER_IDENTIFICATION OFF "} *) reg signed [A_WIDTH-1:0] a1_pipeline2_reg, a2_pipeline2_reg, a3_pipeline2_reg, a4_pipeline2_reg;
	(* altera_attribute = {" -name SYNCHRONIZER_IDENTIFICATION OFF "} *) reg signed [B_WIDTH-1:0] b1_pipeline2_reg, b2_pipeline2_reg, b3_pipeline2_reg, b4_pipeline2_reg;

	// LOADCONST Input Register
	(* altera_attribute = {" -name SYNCHRONIZER_IDENTIFICATION OFF "} *) reg loadconst_reg;
	// LOADCONST Pipeline Register
	(* altera_attribute = {" -name SYNCHRONIZER_IDENTIFICATION OFF "} *) reg loadconst_pipeline1_reg;
	// LOADCONST Second Pipeline Register
	(* altera_attribute = {" -name SYNCHRONIZER_IDENTIFICATION OFF "} *) reg loadconst_pipeline2_reg;

	// ACCUMULATE Input Register
	(* altera_attribute = {" -name SYNCHRONIZER_IDENTIFICATION OFF "} *) reg accum_reg;
	// ACCUMULATE Pipeline Register
	(* altera_attribute = {" -name SYNCHRONIZER_IDENTIFICATION OFF "} *) reg accum_pipeline1_reg;
	// ACCUMULATE Second Pipeline Register
	(* altera_attribute = {" -name SYNCHRONIZER_IDENTIFICATION OFF "} *) reg accum_pipeline2_reg;

	// Summation Result and Output Register
	(* altera_attribute = {" -name SYNCHRONIZER_IDENTIFICATION OFF "} *) reg signed [A_WIDTH+B_WIDTH:0] s1_output_reg;
	wire signed [A_WIDTH+B_WIDTH:0] s2;

	// Accumulate, double acc
	wire signed [CHAIN_WIDTH-1:0] selected_value, select_feedback;
	wire signed [CHAIN_WIDTH-1:0] acc_sel;
	(* altera_attribute = {" -name SYNCHRONIZER_IDENTIFICATION OFF "} *) reg signed [CHAIN_WIDTH-1:0] s_reg, s_double;

	// accumulator path
	assign acc_sel = accum_pipeline2_reg ? select_feedback : selected_value;
	assign select_feedback = (enable_double_accum == "TRUE")? s_double: s_reg;
	assign selected_value = loadconst_pipeline2_reg? PRELOAD_VALUE : 0;

	// Input registers (for DATA and DYNAMIC CONTROL SIGNAL), and Delay registers
	// All input and delay registers must use the same reset signal,
	// Each DATA input and delay register may have different ena signal.
	// The DYNAMIC CONTROL SIGNAL input registers(e.g. loadconst and accumulate) can have different ena signal than that of the DATA input register.
	// But all DYNAMIC CONTROL SIGNAL input registers must share the same ena signal.
	always @(posedge clock) begin
		if (ena1) begin
			if (sclr1) begin
				// Input registers (for DATA)
				a1_reg <= 0;
				b1_reg <= 0;
				a2_reg <= 0;
				b2_reg <= 0;
				a3_reg <= 0;
				b3_reg <= 0;
				a4_reg <= 0;
				b4_reg <= 0;
				// Input registers (for DYNAMIC CONTROL SIGNAL)
				loadconst_reg <= 0;
				accum_reg <= 0;
				// Delay register
				b2_delay_reg <= 0;
			end else begin
				a1_reg <= a1;
				b1_reg <= b1;
				a2_reg <= a2;
				b2_reg <= b1_reg;
				a3_reg <= a3;
				b3_reg <= b2_delay_reg;
				a4_reg <= a4;
				b4_reg <= b3_reg;
				b2_delay_reg <= b2_reg;
				loadconst_reg <= loadconst;
				accum_reg <= accum;
			end
		end
	end

	// Input pipeline register (for DATA and DYNAMIC CONTROL SIGNAL)
	// All input pipeline registers must use the same {ena, reset}
	// The input pipeline register bank must use the same reset as the second pipeline and output register banks
	// The DYNAMIC CONTROL SIGNAL input pipeline register can be bypassed independently
	always @(posedge clock) begin
		if (ena2) begin
			if (sclr2) begin
				a1_pipeline1_reg <= 0;
				b1_pipeline1_reg <= 0;
				a2_pipeline1_reg <= 0;
				b2_pipeline1_reg <= 0;
				a3_pipeline1_reg <= 0;
				b3_pipeline1_reg <= 0;
				a4_pipeline1_reg <= 0;
				b4_pipeline1_reg <= 0;
				loadconst_pipeline1_reg <= 0;
				accum_pipeline1_reg <= 0;
			end else begin
				a1_pipeline1_reg <= a1_reg;
				b1_pipeline1_reg <= b1_reg;
				a2_pipeline1_reg <= a2_reg;
				b2_pipeline1_reg <= b2_reg;
				a3_pipeline1_reg <= a3_reg;
				b3_pipeline1_reg <= b3_reg;
				a4_pipeline1_reg <= a4_reg;
				b4_pipeline1_reg <= b4_reg;
				loadconst_pipeline1_reg <= loadconst_reg;
				accum_pipeline1_reg <= accum_reg;
			end
		end
	end

	// Second pipeline register (for DATA and DYNAMIC CONTROL SIGNAL)
	// All second pipeline registers must use the same {ena, reset}
	// The second pipeline register bank must use the same reset as the input pipeline and output register banks
	// The DYNAMIC CONTROL SIGNAL input pipeline register can be bypassed independently
	always @(posedge clock) begin
		if (ena2) begin
			if (sclr2) begin
				a1_pipeline2_reg <= 0;
				b1_pipeline2_reg <= 0;
				a2_pipeline2_reg <= 0;
				b2_pipeline2_reg <= 0;
				a3_pipeline2_reg <= 0;
				b3_pipeline2_reg <= 0;
				a4_pipeline2_reg <= 0;
				b4_pipeline2_reg <= 0;
				loadconst_pipeline2_reg <= 0;
				accum_pipeline2_reg <= 0;
			end else begin
				a1_pipeline2_reg <= a1_pipeline1_reg;
				b1_pipeline2_reg <= b1_pipeline1_reg;
				a2_pipeline2_reg <= a2_pipeline1_reg;
				b2_pipeline2_reg <= b2_pipeline1_reg;
				a3_pipeline2_reg <= a3_pipeline1_reg;
				b3_pipeline2_reg <= b3_pipeline1_reg;
				a4_pipeline2_reg <= a4_pipeline1_reg;
				b4_pipeline2_reg <= b4_pipeline1_reg;
				loadconst_pipeline2_reg <= loadconst_pipeline1_reg;
				accum_pipeline2_reg <= accum_pipeline1_reg;
			end
		end
	end

	// Output register
	// The output register bank must share the same reset with input pipeline and second pipeline register banks
	always @(posedge clock) begin
		if (ena3) begin
			if (sclr2) begin
				s1_output_reg <= 0;
				s_reg <= 0;
				s_double <= 0;
			end else begin
				// Sum of 2 multiplier. Supports static add/sub
				s1_output_reg <= m1 + m2;
				// Accumulate and chainout adder
				s_reg <= acc_sel + (s1_output_reg + s2);
				// Double Accumulate
				s_double <= s_reg;
			end
		end
	end

	// Multiplier
	assign m1 = (a1_pipeline2_reg * b1_pipeline2_reg);
	assign m2 = (a2_pipeline2_reg * b2_pipeline2_reg);
	assign m3 = (a3_pipeline2_reg * b3_pipeline2_reg);
	assign m4 = (a4_pipeline2_reg * b4_pipeline2_reg);

	// Sum of 2 multiplier. Support static add/sub
	assign s2 = (m3 + m4);

	// Final output
assign final_output = s_reg;

endmodule
