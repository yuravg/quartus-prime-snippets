# -*- mode: snippet -*-
# name: qpp-M18x19_sumof2-with-Preadder-and-Coefficent
# key: qpp-DSP-Features-for-20-nm-Device-M18x19_sumof2-with-Preadder-and-Coefficent
# group: qpp DSP-Features-for-20-nm-Device
# --
// M18x19_sumof2 with Preadder and Coefficent
// Quartus Prime Verilog Template
// Sum of two 18x19 multipliers with full registers (input, pipeline and output) + preadder + coefficients
// Formula: final_output[t] = (a1[t-3]+b1[t-3])*c1_coef[t-3] + (a2[t-3]+b2[t-3])*c2_coef[t-3]
// Two 18x18 in one DSP block must use coefficient storage simultaneously
// For use with 20-nm device families.

module m18x19_sum_of_2_full_regs_preadd_coef (
	a1, b1, a2, b2, c1_sel, c2_sel,
	clock1, clock2, clock3, ena1, ena2, ena3, reset1, reset2,
	final_output
);

	// This template will only work within the AxB data width range from 2x2 to 18x19.
	parameter AB_WIDTH = 18;
	parameter COEF_WIDTH = 18;
	// up to 8 coefficients (3-bit address)
	parameter SEL_WIDTH = 3;
	// The formula for the multiplier width of one (A+B) x Coefficient.
	parameter MULT_OUTPUT_WIDTH = (AB_WIDTH+1)+ COEF_WIDTH;
// This example uses n=2 multipliers, hence the final output width is MULT_OUTPUT_WIDTH + (n-1)
	parameter FINAL_OUTPUT_WIDTH = MULT_OUTPUT_WIDTH + 1;

	// Data input ports
	input signed [AB_WIDTH-1:0] a1, a2;
	input signed [AB_WIDTH-1:0] b1, b2;

	// Coefficient selection ports. Selection of up to 8 coefficients (3-bit address)
	input [SEL_WIDTH-1:0] c1_sel, c2_sel;

	//	Register clock and control signals
	// DSP supports up to 3 clock/ena pairs and 2 async reset signals
	input clock1, clock2, clock3, ena1, ena2, ena3, reset1, reset2;

	// Output signal
	// Max output width is 64
	output signed [FINAL_OUTPUT_WIDTH-1:0] final_output;

	// Coefficient storage (ROM inferencing template)
	reg signed [COEF_WIDTH-1:0] c1_coef[2**SEL_WIDTH-1:0];
	reg signed [COEF_WIDTH-1:0] c2_coef[2**SEL_WIDTH-1:0];

	// Coefficient selection result
	reg signed [COEF_WIDTH-1:0] c1_coef_wire, c2_coef_wire;

	// Preadder result
	wire signed [AB_WIDTH:0] ab1, ab2;

	// Multiplier result
	wire signed [MULT_OUTPUT_WIDTH-1:0] m1, m2;

	// Input Register
	reg signed [AB_WIDTH-1:0] a1_reg, a2_reg;
	reg signed [AB_WIDTH-1:0] b1_reg, b2_reg;
	reg signed [SEL_WIDTH-1:0] c2_sel_reg, c1_sel_reg;

	// Input Pipeline Register
	reg signed [AB_WIDTH-1:0] a1_pipeline_reg, a2_pipeline_reg;
	reg signed [AB_WIDTH-1:0] b1_pipeline_reg, b2_pipeline_reg;
	reg signed [SEL_WIDTH-1:0] c1_sel_pipeline_reg, c2_sel_pipeline_reg;

	// Output Register
	reg signed [FINAL_OUTPUT_WIDTH-1:0] s_output_reg;

	// Data Input register
	// DSP supports up to 3 clock/ena pairs and 2 async reset signals
	// When preadder is used, the inputs to the preadder must use the same {clock, ena}
	// The coefficient select input may use a different clock than that of the preadder inputs.
	// All registered inputs must use the same reset
	always @(posedge clock1 or posedge reset1)
	if (reset1) begin
		a1_reg <= 0;
		b1_reg <= 0;
		a2_reg <= 0;
		b2_reg <= 0;
		c1_sel_reg <= 0;
		c2_sel_reg <= 0;
	end else begin
		if (ena1) begin
			a1_reg <= a1;
			b1_reg <= b1;
			a2_reg <= a2;
			b2_reg <= b2;
			c1_sel_reg <= c1_sel;
			c2_sel_reg <= c2_sel;
		end
	end

	// Input pipeline register
	// All pipeline registers must use the same {clock, ena, reset}
	// The pipeline register must use the same reset as the output register
	always @(posedge clock2 or posedge reset2)
	if (reset2) begin
		a1_pipeline_reg <= 0;
		b1_pipeline_reg <= 0;
		a2_pipeline_reg <= 0;
		b2_pipeline_reg <= 0;
		c1_sel_pipeline_reg <= 0;
		c2_sel_pipeline_reg <= 0;
	end else begin
		if (ena2) begin
			a1_pipeline_reg <= a1_reg;
			b1_pipeline_reg <= b1_reg;
			a2_pipeline_reg <= a2_reg;
			b2_pipeline_reg <= b2_reg;
			c1_sel_pipeline_reg <= c1_sel_reg;
			c2_sel_pipeline_reg <= c2_sel_reg;
		end
	end

	// Output register
	// Output register must share the same reset with input pipeline register
	always @(posedge clock3 or posedge reset2)
	if (reset2) begin
		s_output_reg <= 0;
	end else begin
		if (ena3) begin
			// Static add/sub is supported
			s_output_reg <= m1 + m2;
		end
	end

	// Preadder
	// Preadder supports static add/sub
	// Both 18x18 in one DSP block must use preadder simultaneously
	// Both 18x18 in one DSP block must have the same add/sub
	assign ab1 = a1_pipeline_reg + b1_pipeline_reg;
	assign ab2 = a2_pipeline_reg + b2_pipeline_reg;

	// Coefficients
	initial
	begin
		c1_coef[0] = 18'b001010111111101011;
		c1_coef[1] = 18'b001010111111101011;
		c1_coef[2] = 18'b001010110000001011;
		c1_coef[3] = 18'b001010000011101011;
		c1_coef[4] = 18'b001010111111101011;
		c1_coef[5] = 18'b001010111111101011;
		c1_coef[6] = 18'b001010100111101011;
		c1_coef[7] = 18'b110101111001110100;

		c2_coef[0] = 18'b001010101001000110;
		c2_coef[1] = 18'b011010111111101011;
		c2_coef[2] = 18'b001011011000001010;
		c2_coef[3] = 18'b101010100011101011;
		c2_coef[4] = 18'b001010110101101010;
		c2_coef[5] = 18'b001010110111011011;
		c2_coef[6] = 18'b011010101110101010;
		c2_coef[7] = 18'b010101011010100100;
	end

	always @ (c1_sel_pipeline_reg)
	begin
		c1_coef_wire = c1_coef[c1_sel_pipeline_reg];
	end
	always @ (c2_sel_pipeline_reg)
	begin
		c2_coef_wire = c2_coef[c2_sel_pipeline_reg];
	end

	// Multiplier
	assign m1 = (c1_coef_wire * ab1);
	assign m2 = (c2_coef_wire * ab2);

	// Final output
	assign final_output = s_output_reg;


endmodule
