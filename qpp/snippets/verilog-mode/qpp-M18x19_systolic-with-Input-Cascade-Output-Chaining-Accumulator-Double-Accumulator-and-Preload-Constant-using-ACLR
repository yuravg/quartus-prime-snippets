# -*- mode: snippet -*-
# name: qpp-M18x19_systolic-with-Input-Cascade-Output-Chaining-Accumulator-Double-Accumulator-and-Preload-Constant-using-ACLR
# key: qpp-DSP-Features-for-10-nm-Device-M18x19_systolic-with-Input-Cascade-Output-Chaining-Accumulator-Double-Accumulator-and-Preload-Constant-using-ACLR
# --
// M18x19_systolic with Input Cascade, Output Chaining, Accumulator, Double Accumulator and Preload Constant using ACLR
// Quartus Prime Verilog Template
// 18x19_systolic with full registers (input, pipeline, systolic and output) using asynchronous clear + input cascade chain (and input delay register) + chainout adder + accumulate + double accumulate + preload constant
// Formula: final_output[t] = zero_bit_a*zero_bit_b + a1[t-8]*b1[t-8] + a2[t-7]*b1[t-9] - a3[t-6]*b1(t-10) + a4[t-5]*b1[t-11] + a5(t-4)*b1(t-12) + acc_sel
//          where zero_bit_a*zero_bit_b is a dummy multiplier
//          where acc_sel = final_output[t-2] or preload_value or 0 depending on dynamic control inputs "accum" and "loadconst"
// When this template is used, the number of multipliers has to be even
// A dummy 0x0 multiplier can be created if the number of multipliers is odd to make up the number to even.
// For use with 10-nm device families
// All registers support asynchronous or synchronous clear but all registers within the same design must use the same clear type
// When synchronous clear is used, the ena signal has a higher priority than the clear signal
// Synchronizer register identification is disabled in all registers used in this template to ensure the DSP block's internal registers are fully packed for maximum DSP performance (fMAX). Ensure proper timing constraints are done if this template is used in asynchronous clock domains to avoid potential metastability issue. For more information on managing metastability in Quartus, refer to https://www.altera.co.jp/ja_JP/pdfs/literature/hb/qts/qts_qii51018.pdf

module m18x19_systolic_full_regs_inputcascade_chainoutadder_acc_doubleacc_preloadConst_10nm #(
	// This template will only work within the AxB data width range from 2x2 to 18x19.
	parameter A_WIDTH = 18, B_WIDTH = 19,

	// PRELOAD_VALUE can be 2 power of N, which N should less than 64
	// PRELOAD_VALUE should contain only one bit 1
	parameter PRELOAD_VALUE = 'h400,

	// The max chain width for systolic mode is 44.
	parameter CHAIN_WIDTH = 44,

	// Double accumulation enable control parameter
	parameter enable_double_accum = "TRUE"
) (
	// Data input ports
	input signed [A_WIDTH-1:0] a1,
	input signed [A_WIDTH-1:0] a2,
	input signed [A_WIDTH-1:0] a3,
	input signed [A_WIDTH-1:0] a4,
	input signed [A_WIDTH-1:0] a5,
	input signed [B_WIDTH-1:0] b1,

	// Register clock and control signals
	// DSP supports single clock, 3 ena and 2 async reset signals
	input clock,
	input ena1,
	input ena2,
	input ena3,
	input aclr1,
	input aclr2,

	// Dynamic ACCUMULATE and LOADCONST control signals
	input accum,
	input loadconst,

	// Output signal
	// Max output width for chaining is 44
	output signed [CHAIN_WIDTH-1:0] final_output
);

	// Multiplier Result
	wire signed [A_WIDTH+B_WIDTH-1:0] m1, m2, m3, m4, m5, m0;

	// Summation result
	(* altera_attribute = {" -name SYNCHRONIZER_IDENTIFICATION OFF "} *) reg signed [CHAIN_WIDTH-1:0] s1_output_reg, s2_output_reg, s3_output_reg, s4_output_reg, s5_output_reg;

	// Data Input Register
	(* altera_attribute = {" -name SYNCHRONIZER_IDENTIFICATION OFF "} *) reg signed [A_WIDTH-1:0] a1_reg, a2_reg, a3_reg, a4_reg, a5_reg;
	(* altera_attribute = {" -name SYNCHRONIZER_IDENTIFICATION OFF "} *) reg signed [B_WIDTH-1:0] b1_reg, b2_reg, b3_reg, b4_reg, b5_reg;

	// Data Input Cascade Delay register
	// There are two input delay registers in one DSP block: one in each of the two multipliers.
	// In 18x19 systolic mode, both delay registers in a DSP block can be used.
	(* altera_attribute = {" -name SYNCHRONIZER_IDENTIFICATION OFF "} *) reg signed [B_WIDTH-1:0] b1_delay_reg, b2_delay_reg, b3_delay_reg, b4_delay_reg;

	// Data Input Pipeline Register
	(* altera_attribute = {" -name SYNCHRONIZER_IDENTIFICATION OFF "} *) reg signed [A_WIDTH-1:0] a1_pipeline1_reg, a2_pipeline1_reg, a3_pipeline1_reg, a4_pipeline1_reg, a5_pipeline1_reg;
	(* altera_attribute = {" -name SYNCHRONIZER_IDENTIFICATION OFF "} *) reg signed [B_WIDTH-1:0] b1_pipeline1_reg, b2_pipeline1_reg, b3_pipeline1_reg, b4_pipeline1_reg, b5_pipeline1_reg;

	// Data Input Second Pipeline Register
	(* altera_attribute = {" -name SYNCHRONIZER_IDENTIFICATION OFF "} *) reg signed [A_WIDTH-1:0] a1_pipeline2_reg, a2_pipeline2_reg, a3_pipeline2_reg, a4_pipeline2_reg, a5_pipeline2_reg;
	(* altera_attribute = {" -name SYNCHRONIZER_IDENTIFICATION OFF "} *) reg signed [B_WIDTH-1:0] b1_pipeline2_reg, b2_pipeline2_reg, b3_pipeline2_reg, b4_pipeline2_reg, b5_pipeline2_reg;

	// LOADCONST Input Register
	(* altera_attribute = {" -name SYNCHRONIZER_IDENTIFICATION OFF "} *) reg loadconst_reg;
	// LOADCONST Pipeline Register
	(* altera_attribute = {" -name SYNCHRONIZER_IDENTIFICATION OFF "} *) reg loadconst_pipeline1_reg;
	// LOADCONST Second Pipeline Register
	(* altera_attribute = {" -name SYNCHRONIZER_IDENTIFICATION OFF "} *) reg loadconst_pipeline2_reg;

	// ACCUMULATE Input Register
	(* altera_attribute = {" -name SYNCHRONIZER_IDENTIFICATION OFF "} *) reg accum_reg;
	// ACCUMULATE Pipeline Register
	(* altera_attribute = {" -name SYNCHRONIZER_IDENTIFICATION OFF "} *) reg accum_pipeline1_reg;
	// ACCUMULATE Second Pipeline Register
	(* altera_attribute = {" -name SYNCHRONIZER_IDENTIFICATION OFF "} *) reg accum_pipeline2_reg;

	// Accumulate, double acc
	wire signed [CHAIN_WIDTH-1:0] selected_value, select_feedback;
	wire signed [CHAIN_WIDTH-1:0] acc_sel;
	(* altera_attribute = {" -name SYNCHRONIZER_IDENTIFICATION OFF "} *) reg signed [CHAIN_WIDTH-1:0] s_reg, s_double;

	// The following is required for the dummy multiplier.
	(* altera_attribute = {" -name SYNCHRONIZER_IDENTIFICATION OFF "} *) reg signed [A_WIDTH-1:0] zero_bit_a_reg, zero_bit_a_pipeline1_reg, zero_bit_a_pipeline2_reg /* synthesis preserve */;
	(* altera_attribute = {" -name SYNCHRONIZER_IDENTIFICATION OFF "} *) reg signed [B_WIDTH-1:0] zero_bit_b_reg, zero_bit_b_pipeline1_reg, zero_bit_b_pipeline2_reg /* synthesis preserve */;
	wire signed zero_bit;
	soft sbz (1'b0, zero_bit);

	// accumulator path
	assign acc_sel = accum_pipeline2_reg ? select_feedback : selected_value;
	assign select_feedback = (enable_double_accum == "TRUE")? s_double: s_reg;
	assign selected_value = loadconst_pipeline2_reg? PRELOAD_VALUE : 0;

	// Input registers (for DATA and DYNAMIC CONTROL SIGNAL), and delay registers
	// All input and delay registers must use the same reset signal.
	// Each DATA input and delay register may have different ena signal.
	// The DYNAMIC CONTROL SIGNAL input registers(e.g. loadconst and accumulate) can have different ena signal than that of the DATA input register.
	// But all DYNAMIC CONTROL SIGNAL input registers must share the same ena signal.
	always @(posedge clock or posedge aclr1) begin
		if (aclr1) begin
			// Input registers (for DATA)
			a1_reg <= 0;
			b1_reg <= 0;
			a2_reg <= 0;
			b2_reg <= 0;
			a3_reg <= 0;
			b3_reg <= 0;
			a4_reg <= 0;
			b4_reg <= 0;
			a5_reg <= 0;
			b5_reg <= 0;
			zero_bit_a_reg <= 0;
			zero_bit_b_reg <= 0;
			// Input registers (for DYNAMIC CONTROL SIGNAL)
			loadconst_reg <= 0;
			accum_reg <= 0;
			// Delay register
			b1_delay_reg <= 0;
			b2_delay_reg <= 0;
			b3_delay_reg <= 0;
			b4_delay_reg <= 0;
		end else if (ena1) begin
			a1_reg <= a1;
			b1_reg <= b1;
			a2_reg <= a2;
			b2_reg <= b1_delay_reg;
			a3_reg <= a3;
			b3_reg <= b2_delay_reg;
			a4_reg <= a4;
			b4_reg <= b3_delay_reg;
			a5_reg <= a5;
			b5_reg <= b4_delay_reg;
			loadconst_reg <= loadconst;
			accum_reg <= accum;
			b1_delay_reg <= b1_reg;
			b2_delay_reg <= b2_reg;
			b3_delay_reg <= b3_reg;
			b4_delay_reg <= b4_reg;
			// input for dummy multiplier 0x0
			zero_bit_a_reg <= {A_WIDTH{zero_bit}};
			zero_bit_b_reg <= {B_WIDTH{zero_bit}};
		end
	end

	// Input pipeline register (for DATA and DYNAMIC CONTROL SIGNAL)
	// All input pipeline registers must use the same {ena, reset}
	// The input ipeline register bank must use the same reset as the second pipeline and output register banks
	// The DYNAMIC CONTROL SIGNAL input pipeline register can be bypassed independently
	always @(posedge clock or posedge aclr2) begin
		if (aclr2) begin
			a1_pipeline1_reg <= 0;
			b1_pipeline1_reg <= 0;
			a2_pipeline1_reg <= 0;
			b2_pipeline1_reg <= 0;
			a3_pipeline1_reg <= 0;
			b3_pipeline1_reg <= 0;
			a4_pipeline1_reg <= 0;
			b4_pipeline1_reg <= 0;
			a5_pipeline1_reg <= 0;
			b5_pipeline1_reg <= 0;
			zero_bit_a_pipeline1_reg <= 0;
			zero_bit_b_pipeline1_reg <= 0;
			loadconst_pipeline1_reg <= 0;
			accum_pipeline1_reg <= 0;
		end else if (ena2) begin
			a1_pipeline1_reg <= a1_reg;
			b1_pipeline1_reg <= b1_reg;
			a2_pipeline1_reg <= a2_reg;
			b2_pipeline1_reg <= b2_reg;
			a3_pipeline1_reg <= a3_reg;
			b3_pipeline1_reg <= b3_reg;
			a4_pipeline1_reg <= a4_reg;
			b4_pipeline1_reg <= b4_reg;
			a5_pipeline1_reg <= a5_reg;
			b5_pipeline1_reg <= b5_reg;
			zero_bit_a_pipeline1_reg <= zero_bit_a_reg;
			zero_bit_b_pipeline1_reg <= zero_bit_b_reg;
			loadconst_pipeline1_reg <= loadconst_reg;
			accum_pipeline1_reg <= accum_reg;
		end
	end

	// Second pipeline register (for DATA and DYNAMIC CONTROL SIGNAL)
	// All second pipeline registers must use the same {ena, reset}
	// For systolic designs, the second pipeline register bank must use the same {ena, reset} as the output register bank
	// The DYNAMIC CONTROL SIGNAL input pipeline register can be bypassed independently
	always @(posedge clock or posedge aclr2) begin
		if (aclr2) begin
			a1_pipeline2_reg <= 0;
			b1_pipeline2_reg <= 0;
			a2_pipeline2_reg <= 0;
			b2_pipeline2_reg <= 0;
			a3_pipeline2_reg <= 0;
			b3_pipeline2_reg <= 0;
			a4_pipeline2_reg <= 0;
			b4_pipeline2_reg <= 0;
			a5_pipeline2_reg <= 0;
			b5_pipeline2_reg <= 0;
			zero_bit_a_pipeline2_reg <= 0;
			zero_bit_b_pipeline2_reg <= 0;
			loadconst_pipeline2_reg <= 0;
			accum_pipeline2_reg <= 0;
		end else if (ena3) begin
			a1_pipeline2_reg <= a1_pipeline1_reg;
			b1_pipeline2_reg <= b1_pipeline1_reg;
			a2_pipeline2_reg <= a2_pipeline1_reg;
			b2_pipeline2_reg <= b2_pipeline1_reg;
			a3_pipeline2_reg <= a3_pipeline1_reg;
			b3_pipeline2_reg <= b3_pipeline1_reg;
			a4_pipeline2_reg <= a4_pipeline1_reg;
			b4_pipeline2_reg <= b4_pipeline1_reg;
			a5_pipeline2_reg <= a5_pipeline1_reg;
			b5_pipeline2_reg <= b5_pipeline1_reg;
			zero_bit_a_pipeline2_reg <= zero_bit_a_pipeline1_reg;
			zero_bit_b_pipeline2_reg <= zero_bit_b_pipeline1_reg;
			loadconst_pipeline2_reg <= loadconst_pipeline1_reg;
			accum_pipeline2_reg <= accum_pipeline1_reg;
		end
	end

	// Output register
	// The output register bank must share the same reset with input pipeline and second pipeline register banks
	// Even though the output registers are not explicitly declared, they will be inferred later during compilation.
	// Thus, it is important to place the s1_output_reg-s5_output_reg operation within the output register enable (i.e. ena3=1) condition.
	always @(posedge clock or posedge aclr2) begin
		if (aclr2) begin
			s1_output_reg <= 0;
			s2_output_reg <= 0;
			s3_output_reg <= 0;
			s4_output_reg <= 0;
			s5_output_reg <= 0;
			s_reg <= 0;
			s_double <= 0;
		end else if (ena3) begin
			// chainout adder supports static add/sub
			s1_output_reg <= m0;
			s2_output_reg <= s1_output_reg + m1; // the multiplication result must be the second operand
			s3_output_reg <= s2_output_reg + m2;
			s4_output_reg <= s3_output_reg - m3;
			s5_output_reg <= s4_output_reg + m4;
			// chainout accumulator only supports addition when using the chainout adder
			s_reg <= acc_sel + (s5_output_reg + m5); // loopback path (acc_sel) must be the first operand
			// Double Accumulate
			s_double <= s_reg;
		end
	end

	// Multiplier
	assign m1 = (a1_pipeline2_reg * b1_pipeline2_reg);
	assign m2 = (a2_pipeline2_reg * b2_pipeline2_reg);
	assign m3 = (a3_pipeline2_reg * b3_pipeline2_reg);
	assign m4 = (a4_pipeline2_reg * b4_pipeline2_reg);
	assign m5 = (a5_pipeline2_reg * b5_pipeline2_reg);

	// Dummy multiplier
	assign m0 = (zero_bit_a_pipeline2_reg * zero_bit_b_pipeline2_reg);

	// Final output
assign final_output = s_reg;

endmodule
