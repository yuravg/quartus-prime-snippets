# -*- mode: snippet -*-
# name: qpp-M27x27-with-Dynamic-Negate-with-Output-Chaining-using-ACLR
# key: qpp-DSP-Features-for-10-nm-Device-M27x27-with-Dynamic-Negate-with-Output-Chaining-using-ACLR
# --
// M27x27 with Dynamic Negate with Output Chaining using ACLR
// Quartus Prime Verilog Template
// m27x27 multiplier with full registers (input, 2 pipeline stages and output) using asynchronous clear + chainout adder + dynamic negate
// Formula: final_output[t] = a1[t-5]*b1[t-5] +/- a2[t-4]*b2[t-4]
// For use with 10-nm device families
// All registers support asynchronous or synchronous clear but all registers within the same design must use the same clear type
// When synchronous clear is used, the ena signal has a higher priority than the clear signal

module m27x27_full_regs_chainoutadder_dynNegate_10nm #(
	// This template will only work where one of the two multiplier operands(signed A and signed B) data width falls within >19 and <=27.
	parameter A_WIDTH = 27, B_WIDTH = 27,
	// This example uses n=2 multipliers, hence the final output width is A_WIDTH + B_WIDTH + (n-1)
	parameter FINAL_OUTPUT_WIDTH = A_WIDTH + B_WIDTH + 1
) (
	// Data input ports
	input signed [A_WIDTH-1:0] a1,
	input signed [A_WIDTH-1:0] a2,
	input signed [B_WIDTH-1:0] b1,
	input signed [B_WIDTH-1:0] b2,

	// Register clock and control signals
	// DSP supports single clock, 3 ena and 2 async reset signals
	input clock,
	input ena1,
	input ena2,
	input ena3,
	input aclr1,
	input aclr2,

	// Dynamic NEGATE control signals
	input negate,

	// Output signal
	// Max output width for chaining is 64
	output signed [FINAL_OUTPUT_WIDTH-1:0] final_output
);

	// Multiplier Result
	wire signed [A_WIDTH+B_WIDTH-1:0] m1, m2;

	// Data Input Register
	(* altera_attribute = {" -name SYNCHRONIZER_IDENTIFICATION OFF "} *) reg signed [A_WIDTH-1:0] a1_reg, a2_reg;
	(* altera_attribute = {" -name SYNCHRONIZER_IDENTIFICATION OFF "} *) reg signed [B_WIDTH-1:0] b1_reg, b2_reg;
	// Data Input Pipeline Register
	(* altera_attribute = {" -name SYNCHRONIZER_IDENTIFICATION OFF "} *) reg signed [A_WIDTH-1:0] a1_pipeline1_reg, a2_pipeline1_reg;
	(* altera_attribute = {" -name SYNCHRONIZER_IDENTIFICATION OFF "} *) reg signed [B_WIDTH-1:0] b1_pipeline1_reg, b2_pipeline1_reg;
	// Data Input Pipeline Register
	(* altera_attribute = {" -name SYNCHRONIZER_IDENTIFICATION OFF "} *) reg signed [A_WIDTH-1:0] a1_pipeline2_reg, a2_pipeline2_reg;
	(* altera_attribute = {" -name SYNCHRONIZER_IDENTIFICATION OFF "} *) reg signed [B_WIDTH-1:0] b1_pipeline2_reg, b2_pipeline2_reg;

	// Negate Input Register
	(* altera_attribute = {" -name SYNCHRONIZER_IDENTIFICATION OFF "} *) reg negate_reg;
	// Negate Pipeline Register
	(* altera_attribute = {" -name SYNCHRONIZER_IDENTIFICATION OFF "} *) reg negate_pipeline1_reg;
	// Negate Second Pipeline Register
	(* altera_attribute = {" -name SYNCHRONIZER_IDENTIFICATION OFF "} *) reg negate_pipeline2_reg;

	// Output Register
	(* altera_attribute = {" -name SYNCHRONIZER_IDENTIFICATION OFF "} *) reg signed [A_WIDTH+B_WIDTH-1:0] m1_output_reg;
	(* altera_attribute = {" -name SYNCHRONIZER_IDENTIFICATION OFF "} *) reg signed [FINAL_OUTPUT_WIDTH-1:0] final_output_reg;

	// Input registers (for DATA and DYNAMIC CONTROL SIGNAL).
	// All input registers must use the same reset signal.
	// Each DATA input register may have a different ena signal.
	// The DYNAMIC CONTROL SIGNAL input registers (e.g. negate) can have a different ena signal than that of the DATA input register.
	// However all DYNAMIC CONTROL SIGNAL input registers must share the same ena signal.
	always @(posedge clock or posedge aclr1) begin
		if (aclr1) begin
			// Input registers (for DATA)
			a1_reg <= 0;
			b1_reg <= 0;
			a2_reg <= 0;
			b2_reg <= 0;
			// Input registers (for DYNAMIC CONTROL SIGNAL)
			negate_reg <= 0;
		end else if (ena1) begin
			a1_reg <= a1;
			b1_reg <= b1;
			a2_reg <= a2;
			b2_reg <= b2;
			negate_reg <= negate;
		end
	end

	// Input pipeline register (for DATA and DYNAMIC CONTROL SIGNAL)
	// All input pipeline registers must use the same ena signal
	// The input pipeline register bank must use the same reset as the second pipeline and output register banks
	// The DYNAMIC CONTROL SIGNAL input pipeline register can be bypassed independently
	always @(posedge clock or posedge aclr2) begin
		if (aclr2) begin
			a1_pipeline1_reg <= 0;
			b1_pipeline1_reg <= 0;
			a2_pipeline1_reg <= 0;
			b2_pipeline1_reg <= 0;
			negate_pipeline1_reg <= 0;
		end else if (ena2) begin
			a1_pipeline1_reg <= a1_reg;
			b1_pipeline1_reg <= b1_reg;
			a2_pipeline1_reg <= a2_reg;
			b2_pipeline1_reg <= b2_reg;
			negate_pipeline1_reg <= negate_reg;
		end
	end

	// Second pipeline register (for DATA and DYNAMIC CONTROL SIGNAL)
	// All second pipeline registers must use the same ena signal
	// The second pipeline register bank must use the same reset as the input pipeline and output register banks
	// The DYNAMIC CONTROL SIGNAL second pipeline register can be bypassed independently
	always @(posedge clock or posedge aclr2) begin
		if (aclr2) begin
			a1_pipeline2_reg <= 0;
			b1_pipeline2_reg <= 0;
			a2_pipeline2_reg <= 0;
			b2_pipeline2_reg <= 0;
			negate_pipeline2_reg <= 0;
		end else if (ena2) begin
			a1_pipeline2_reg <= a1_pipeline1_reg;
			b1_pipeline2_reg <= b1_pipeline1_reg;
			a2_pipeline2_reg <= a2_pipeline1_reg;
			b2_pipeline2_reg <= b2_pipeline1_reg;
			negate_pipeline2_reg <= negate_pipeline1_reg;
		end
	end

	// Output register
	// The output register bank must share the same reset with input pipeline and second pipeline register banks
	always @(posedge clock or posedge aclr2) begin
		if (aclr2) begin
			m1_output_reg <= 0;
			final_output_reg <= 0;
		end else if (ena3) begin
			m1_output_reg <= m1;

			// Dynamic negate
			if (negate_pipeline2_reg) begin
				final_output_reg <= m1_output_reg - m2;
			end else begin
				final_output_reg <= m1_output_reg + m2;
			end
		end
	end

	// Multiplier
	assign m1 = (a1_pipeline2_reg * b1_pipeline2_reg);
	assign m2 = (a2_pipeline2_reg * b2_pipeline2_reg);

	// Final output
	assign final_output = final_output_reg;

endmodule
