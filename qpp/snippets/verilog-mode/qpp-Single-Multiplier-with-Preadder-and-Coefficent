# -*- mode: snippet -*-
# name: qpp-Single-Multiplier-with-Preadder-and-Coefficent
# key: qpp-DSP-Features-for-20-nm-Device-Single-Multiplier-with-Preadder-and-Coefficent
# --
// Single Multiplier with Preadder and Coefficent
// Quartus Prime Verilog Template
// m18x19_full mode by utilizing half DSP resource
// Single multiplier with full registers (input, pipeline and output) + preadder + coefficients
// Formula: final_output[t] = (a[t-3]+b[t-3])*c_coef[t-3]
//    Note: This mode does not support chainout adder, dynamic ACCUMULATE/LOADCONST/SUB/NEGATE.
// For use with 20-nm device families

module single_mult_full_regs_preadd_coef (
	a, b, c_sel,
	clock1, clock2, clock3, ena1, ena2, ena3, reset1, reset2,
	final_output
);

	// This template will only work within the AxB data width range from 2x2 to 18x19.
	parameter AB_WIDTH = 18;
	parameter COEF_WIDTH = 18;
	// up to 8 coefficients (3-bit address)
	parameter SEL_WIDTH = 3;

	// Data input ports
	input signed [AB_WIDTH-1:0] a;
	input signed [AB_WIDTH-1:0] b;

	// Coefficient selection ports. Selection of up to 8 coefficients (3-bit address)
	input [SEL_WIDTH-1:0] c_sel;

	//	Register clock and control signals
	// DSP supports up to 3 clock/ena pairs and 2 async reset signals
	input clock1, clock2, clock3, ena1, ena2, ena3, reset1, reset2;

	// Output signal
	// Max output width is 64
	output signed [AB_WIDTH+COEF_WIDTH:0] final_output;

	// Coefficient storage (ROM inferencing template)
	reg signed [COEF_WIDTH-1:0] c_coef[2**SEL_WIDTH-1:0];

	// Coefficient selection result
	reg signed [COEF_WIDTH-1:0] c_coef_wire;

	// Preadder result
	wire signed [AB_WIDTH:0] ab;

	// Input Register
	reg signed [AB_WIDTH-1:0] a_reg;
	reg signed [AB_WIDTH-1:0] b_reg;
	reg signed [SEL_WIDTH-1:0] c_sel_reg;

	// Input Pipeline Register
	reg signed [AB_WIDTH-1:0] a_pipeline_reg;
	reg signed [AB_WIDTH-1:0] b_pipeline_reg;
	reg signed [SEL_WIDTH-1:0] c_sel_pipeline_reg;

	// Output Register
	reg signed [AB_WIDTH+COEF_WIDTH:0] final_output_reg;

	// Data Input register
	// DSP supports up to 3 clock/ena pairs and 2 async reset signals
	// When preadder is used, the inputs to the preadder must use the same {clock, ena}
	// The coefficient select input may use a different clock than that of the preadder inputs.
// All registered inputs must use the same reset
	always @(posedge clock1 or posedge reset1)
	if (reset1) begin
		a_reg <= 0;
		b_reg <= 0;
		c_sel_reg <= 0;
	end else begin
		if (ena1) begin
			a_reg <= a;
			b_reg <= b;
			c_sel_reg <= c_sel;
		end
	end

	// Input pipeline register
	// All pipeline registers must use the same {clock, ena, reset}
	// The Pipeline register must use the same reset as the output register
	always @(posedge clock2 or posedge reset2)
	if (reset2) begin
		a_pipeline_reg <= 0;
		b_pipeline_reg <= 0;
		c_sel_pipeline_reg <= 0;
	end else begin
		if (ena2) begin
			a_pipeline_reg <= a_reg;
			b_pipeline_reg <= b_reg;
			c_sel_pipeline_reg <= c_sel_reg;
		end
	end

	// Output register
	// Output register must share the same reset with input pipeline register
	always @(posedge clock3 or posedge reset2)
	if (reset2) begin
		final_output_reg <= 0;
	end else begin
		if (ena3) begin
			// Static add/sub is supported
			final_output_reg <= (c_coef_wire * ab);
		end
	end

	// Preadder
	// Preadder supports static add/sub
	assign ab = a_pipeline_reg + b_pipeline_reg;

	// Coefficients
	initial
	begin
		c_coef[0] = 18'b110101111001110100;
		c_coef[1] = 18'b001010100111101011;
		c_coef[2] = 18'b001010111111101011;
		c_coef[3] = 18'b101010111111101011;
		c_coef[4] = 18'b001010000011010110;
		c_coef[5] = 18'b111010110000001011;
		c_coef[6] = 18'b001010111111010111;
		c_coef[7] = 18'b001010111111101011;

	end

	always @ (c_sel_pipeline_reg)
	begin
		c_coef_wire = c_coef[c_sel_pipeline_reg];
	end

	// Final output
	assign final_output = final_output_reg;


endmodule
