# -*- mode: snippet -*-
# name: qpp-M18x19_sumof2-with-Dynamic-Sub-Dynamic-Negate-and-Output-Chaining-using-SCLR
# key: qpp-DSP-Features-for-10-nm-Device-M18x19_sumof2-with-Dynamic-Sub-Dynamic-Negate-and-Output-Chaining-using-SCLR
# --
// M18x19_sumof2 with Dynamic Sub, Dynamic Negate and Output Chaining using SCLR
-- Quartus Prime VHDL Template
-- Two 'sum of 2 18x19 multipliers' with full registers (input, 2 pipeline stages and output) using synchronous clear + dynamic add/sub + dynamic negate
-- Formula: final_output[t] = a1[t-5]*b1[t-5] +/- a2[t-5]*b2[t-5] +/- a3[t-4]*b3[t-4] +/- a4[t-4]*b4[t-4]
-- For use with 10-nm device families
-- All registers support asynchronous or synchronous clear but all registers within the same design must use the same clear type
-- When synchronous clear is used, the ena signal has a higher priority than the clear signal
-- Synchronizer register identification is disabled in all registers used in this template to ensure the DSP block's internal registers are fully packed for maximum DSP performance (fMAX). Ensure proper timing constraints are done if this template is used in asynchronous clock domains to avoid potential metastability issue. For more information on managing metastability in Quartus, refer to https://www.altera.co.jp/ja_JP/pdfs/literature/hb/qts/qts_qii51018.pdf

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity m18x19_sum_of_2_full_regs_dynSub_dynNegate_sclr_10nm is
	generic
	(
		-- This template will only work within the AxB data width range from 2x2 to 18x19.
		A_WIDTH : natural := 18;
		B_WIDTH : natural := 19;
		-- The formula for the output width of 1 sum of two 18x19 multipliers.
		-- SUM_OUTPUT_WIDTH = A_WIDTH + B_WIDTH + 1
		SUM_OUTPUT_WIDTH : natural := (18+19+1);
		-- This example uses n=2 Sum of two 18x19 multipliers, hence the final output width is SUM_OUTPUT_WIDTH + (n-1)
		-- FINAL_OUTPUT_WIDTH = SUM_OUTPUT_WIDTH + 1
		FINAL_OUTPUT_WIDTH : natural := 38 + 1
	);

	port
	(
		-- Data input ports
		a1       : in signed    ((A_WIDTH-1) downto 0);
		b1       : in signed    ((B_WIDTH-1) downto 0);
		a2       : in signed    ((A_WIDTH-1) downto 0);
		b2       : in signed    ((B_WIDTH-1) downto 0);
		a3       : in signed    ((A_WIDTH-1) downto 0);
		b3       : in signed    ((B_WIDTH-1) downto 0);
		a4       : in signed    ((A_WIDTH-1) downto 0);
		b4       : in signed    ((B_WIDTH-1) downto 0);
		-- Register clock and control signals
		-- DSP supports single clock, 3 ena, and 2 reset signals
		clock     : in std_logic;
		ena1      : in std_logic;
		ena2      : in std_logic;
		ena3      : in std_logic;
		sclr1     : in std_logic;
		sclr2     : in std_logic;
		-- Dynamic addition and subtraction control signals
		addnsub1  : in std_logic;
		addnsub2  : in std_logic;
		negate    : in std_logic;
		-- Output signal
		-- Max output width for chaining is 64
		final_output : out signed ((FINAL_OUTPUT_WIDTH-1) downto 0)
	);

end entity;

architecture rtl of m18x19_sum_of_2_full_regs_dynSub_dynNegate_sclr_10nm is

-- Multiplier Result
signal m1, m2, m3, m4 : signed ((A_WIDTH+B_WIDTH-1) downto 0);
-- Sum Of 2 Multipliers Result
signal s1, s2 : signed ((SUM_OUTPUT_WIDTH-1) downto 0);

-- Data Input Register
signal a1_reg, a2_reg, a3_reg, a4_reg       : signed    ((A_WIDTH-1) downto 0);
signal b1_reg, b2_reg, b3_reg, b4_reg       : signed    ((B_WIDTH-1) downto 0);

--Data Input Pipeline Register
signal a1_pipeline1_reg, a2_pipeline1_reg, a3_pipeline1_reg, a4_pipeline1_reg       : signed    ((A_WIDTH-1) downto 0);
signal b1_pipeline1_reg, b2_pipeline1_reg, b3_pipeline1_reg, b4_pipeline1_reg       : signed    ((B_WIDTH-1) downto 0);

--Data Input Second Pipeline Register
signal a1_pipeline2_reg, a2_pipeline2_reg, a3_pipeline2_reg, a4_pipeline2_reg       : signed    ((A_WIDTH-1) downto 0);
signal b1_pipeline2_reg, b2_pipeline2_reg, b3_pipeline2_reg, b4_pipeline2_reg       : signed    ((B_WIDTH-1) downto 0);

-- Sub Input Register
signal addnsub1_reg : std_logic;
signal addnsub2_reg : std_logic;

-- Sub Pipeline Register
signal addnsub1_pipeline1_reg: std_logic;
signal addnsub2_pipeline1_reg: std_logic;

-- Sub Second Pipeline Register
signal addnsub1_pipeline2_reg: std_logic;
signal addnsub2_pipeline2_reg: std_logic;

-- Negate Input Register
signal negate_reg : std_logic;

-- Negate Pipeline Register
signal negate_pipeline1_reg: std_logic;

-- Negate Second Pipeline Register
signal negate_pipeline2_reg: std_logic;

--Output Register
signal s1_output_reg : signed ((SUM_OUTPUT_WIDTH-1) downto 0);
signal final_output_reg : signed ((FINAL_OUTPUT_WIDTH-1) downto 0);

--Disable synchronizer register identification
attribute altera_attribute : string;
attribute altera_attribute of a1_reg, a2_reg, a3_reg, a4_reg, b1_reg, b2_reg, b3_reg, b4_reg, a1_pipeline1_reg, a2_pipeline1_reg, a3_pipeline1_reg, a4_pipeline1_reg, b1_pipeline1_reg, b2_pipeline1_reg, b3_pipeline1_reg, b4_pipeline1_reg, a1_pipeline2_reg, a2_pipeline2_reg, a3_pipeline2_reg, a4_pipeline2_reg, b1_pipeline2_reg, b2_pipeline2_reg, b3_pipeline2_reg, b4_pipeline2_reg, addnsub1_reg, addnsub2_reg, addnsub1_pipeline1_reg, addnsub2_pipeline1_reg, addnsub1_pipeline2_reg, addnsub2_pipeline2_reg, negate_reg, negate_pipeline1_reg, negate_pipeline2_reg, s1_output_reg, final_output_reg : signal is "-name SYNCHRONIZER_IDENTIFICATION OFF";

begin

	-- Input register (for DATA and DYNAMIC CONTROL SIGNAL)
	-- All input registers must use the same reset signal,
	-- Each DATA input register may have different ena signal.
	-- The DYNAMIC CONTROL SIGNAL input registers(e.g. sub and negate) can have different ena signal than that of the DATA input register.
	-- But all DYNAMIC CONTROL SIGNAL input registers must share the same ena signal.
	process(clock)
	begin
		if rising_edge(clock) then

			if (ena1 = '1') then
				if (sclr1 = '1') then
					-- Input registers (for DATA)
					a1_reg <= (others => '0');
					b1_reg <= (others => '0');
					a2_reg <= (others => '0');
					b2_reg <= (others => '0');
					a3_reg <= (others => '0');
					b3_reg <= (others => '0');
					a4_reg <= (others => '0');
					b4_reg <= (others => '0');
					-- Input registers (for DYNAMIC CONTROL SIGNAL)
					addnsub1_reg <= '0';
					addnsub2_reg <= '0';
					negate_reg <= '0';
				else
					a1_reg <= a1;
					b1_reg <= b1;
					a2_reg <= a2;
					b2_reg <= b2;
					a3_reg <= a3;
					b3_reg <= b3;
					a4_reg <= a4;
					b4_reg <= b4;
					addnsub1_reg <= addnsub1;
					addnsub2_reg <= addnsub2;
					negate_reg <= negate;
				end if;
			end if;

		end if;
	end process;

	-- Input pipeline register (for DATA and DYNAMIC CONTROL SIGNAL)
	-- All input pipeline registers must use the same {ena, reset}
	-- The input pipeline register bank must use the same reset as the second pipeline and output register banks
	-- The DYNAMIC CONTROL SIGNAL input pipeline registers can be bypassed differently
	process(clock)
	begin
		if rising_edge(clock) then

			if (ena2 = '1') then
				if (sclr2 = '1') then
					a1_pipeline1_reg <= (others => '0');
					b1_pipeline1_reg <= (others => '0');
					a2_pipeline1_reg <= (others => '0');
					b2_pipeline1_reg <= (others => '0');
					a3_pipeline1_reg <= (others => '0');
					b3_pipeline1_reg <= (others => '0');
					a4_pipeline1_reg <= (others => '0');
					b4_pipeline1_reg <= (others => '0');
					addnsub1_pipeline1_reg <= '0';
					addnsub2_pipeline1_reg <= '0';
					negate_pipeline1_reg <= '0';
				else
					a1_pipeline1_reg <= a1_reg;
					b1_pipeline1_reg <= b1_reg;
					a2_pipeline1_reg <= a2_reg;
					b2_pipeline1_reg <= b2_reg;
					a3_pipeline1_reg <= a3_reg;
					b3_pipeline1_reg <= b3_reg;
					a4_pipeline1_reg <= a4_reg;
					b4_pipeline1_reg <= b4_reg;
					addnsub1_pipeline1_reg <= addnsub1_reg;
					addnsub2_pipeline1_reg <= addnsub2_reg;
					negate_pipeline1_reg <= negate_reg;
				end if;
			end if;

		end if;
	end process;

	-- Second pipeline register (for DATA and DYNAMIC CONTROL SIGNAL)
	-- All second pipeline registers must use the same {ena, reset}
	-- The second pipeline register bank must use the same reset as the input pipeline and output register banks
	-- The DYNAMIC CONTROL SIGNAL second pipeline registers can be bypassed differently
	process(clock)
	begin
		if rising_edge(clock) then

			if (ena2 = '1') then
				if (sclr2 = '1') then
					a1_pipeline2_reg <= (others => '0');
					b1_pipeline2_reg <= (others => '0');
					a2_pipeline2_reg <= (others => '0');
					b2_pipeline2_reg <= (others => '0');
					a3_pipeline2_reg <= (others => '0');
					b3_pipeline2_reg <= (others => '0');
					a4_pipeline2_reg <= (others => '0');
					b4_pipeline2_reg <= (others => '0');
					addnsub1_pipeline2_reg <= '0';
					addnsub2_pipeline2_reg <= '0';
					negate_pipeline2_reg <= '0';
				else
					a1_pipeline2_reg <= a1_pipeline1_reg;
					b1_pipeline2_reg <= b1_pipeline1_reg;
					a2_pipeline2_reg <= a2_pipeline1_reg;
					b2_pipeline2_reg <= b2_pipeline1_reg;
					a3_pipeline2_reg <= a3_pipeline1_reg;
					b3_pipeline2_reg <= b3_pipeline1_reg;
					a4_pipeline2_reg <= a4_pipeline1_reg;
					b4_pipeline2_reg <= b4_pipeline1_reg;
					addnsub1_pipeline2_reg <= addnsub1_pipeline1_reg;
					addnsub2_pipeline2_reg <= addnsub2_pipeline1_reg;
					negate_pipeline2_reg <= negate_pipeline1_reg;
				end if;
			end if;

		end if;
	end process;

	-- Output register
	-- The output register bank must share the same reset with the input pipeline and second pipeline register banks
	process(clock)
	begin
		if rising_edge(clock) then

			if (ena3 = '1') then
				if (sclr2 = '1') then
					s1_output_reg <= (others => '0');
					final_output_reg <= (others => '0');
				else
					s1_output_reg <= s1;

					-- Dynamic negate
					if (negate_pipeline2_reg = '1') then
					final_output_reg <= resize(s1_output_reg,FINAL_OUTPUT_WIDTH)  - resize(s2,FINAL_OUTPUT_WIDTH);
					else
					final_output_reg <= resize(s1_output_reg,FINAL_OUTPUT_WIDTH)  + resize(s2,FINAL_OUTPUT_WIDTH);
					end if;
				end if;
			end if;

		end if;
	end process;

	-- Multipliers
	m1 <= (a1_pipeline2_reg * b1_pipeline2_reg);
	m2 <= (a2_pipeline2_reg * b2_pipeline2_reg);
	m3 <= (a3_pipeline2_reg * b3_pipeline2_reg);
	m4 <= (a4_pipeline2_reg * b4_pipeline2_reg);

	-- Dynamic add/sub
	with addnsub1_pipeline2_reg select
	s1 <= (resize(m1, SUM_OUTPUT_WIDTH) - resize(m2, SUM_OUTPUT_WIDTH)) when '1',
			(resize(m1, SUM_OUTPUT_WIDTH) + resize(m2, SUM_OUTPUT_WIDTH)) when others;

	-- Dynamic add/sub
	with addnsub2_pipeline2_reg select
	s2 <= (resize(m3, SUM_OUTPUT_WIDTH) - resize(m4, SUM_OUTPUT_WIDTH)) when '1',
			(resize(m3, SUM_OUTPUT_WIDTH) + resize(m4, SUM_OUTPUT_WIDTH)) when others;

	-- Final output
	final_output <= final_output_reg;

end rtl;
