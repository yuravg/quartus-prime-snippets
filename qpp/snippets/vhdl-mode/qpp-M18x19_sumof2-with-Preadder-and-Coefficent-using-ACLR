# -*- mode: snippet -*-
# name: qpp-M18x19_sumof2-with-Preadder-and-Coefficent-using-ACLR
# key: qpp-DSP-Features-for-10-nm-Device-M18x19_sumof2-with-Preadder-and-Coefficent-using-ACLR
# --
// M18x19_sumof2 with Preadder and Coefficent using ACLR
-- Quartus Prime VHDL Template
-- Sum of two 18x19 multipliers with full registers (input, 2 pipeline stages and output) using asynchronous clear + preadder + coefficients
-- Formula: final_output[t] = (a1[t-4]+b1[t-4])*c1_coef[t-4] + (a2[t-4]+b2[t-4])*c2_coef[t-4]
-- Both multiplier in one DSP block must use coefficient input simultaneously
-- For use with 10-nm device families
-- All registers support asynchronous or synchronous clear but all registers within the same design must use the same clear type
-- When synchronous clear is used, the ena signal has a higher priority than the clear signal
-- Synchronizer register identification is disabled in all registers used in this template to ensure the DSP block's internal registers are fully packed for maximum DSP performance (fMAX). Ensure proper timing constraints are done if this template is used in asynchronous clock domains to avoid potential metastability issue. For more information on managing metastability in Quartus, refer to https://www.altera.co.jp/ja_JP/pdfs/literature/hb/qts/qts_qii51018.pdf

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity m18x19_sum_of_2_full_regs_preadd_coef_10nm is
	generic
	(
		-- This template will only work within the AxB data width range from 2x2 to 18x19.
		AB_WIDTH   : natural := 18;
		COEF_WIDTH : natural := 18;
		-- up to 8 coefficients (3-bit address)
		SEL_WIDTH  : natural := 3;
		-- The formula for the multipler width of one (A+B) x Coefficient.
		-- MULT_OUTPUT_WIDTH = (AB_WIDTH + 1) + COEF_WIDTH;
		MULT_OUTPUT_WIDTH   : natural := (18+1)+ 18;
		-- This example uses n=2 multiplers, hence the final output width is MULT_OUTPUT_WIDTH + (n-1)
		-- FINAL_OUTPUT_WIDTH = MULT_OUTPUT_WIDTH + 1
		FINAL_OUTPUT_WIDTH  : natural := 37 + 1
	);

	port
	(
		-- Data input ports
		a1       : in signed    ((AB_WIDTH-1) downto 0);
		b1       : in signed    ((AB_WIDTH-1) downto 0);
		a2       : in signed    ((AB_WIDTH-1) downto 0);
		b2       : in signed    ((AB_WIDTH-1) downto 0);
		-- Coefficient selection ports. Selection of up to 8 coefficients (3-bit address)
		c1_sel    : in std_logic_vector ((SEL_WIDTH)-1 downto 0);
		c2_sel    : in std_logic_vector ((SEL_WIDTH)-1 downto 0);
		-- Register clock and control signals
		-- DSP supports single clock, 3 ena and 2 reset signals
		clock    : in std_logic;
		ena1      : in std_logic;
		ena2      : in std_logic;
		ena3      : in std_logic;
		aclr1     : in std_logic;
		aclr2     : in std_logic;
		-- Output signal
		-- Max output width is 64
		final_output : out signed ((FINAL_OUTPUT_WIDTH-1) downto 0)
	);

end entity;

architecture rtl of m18x19_sum_of_2_full_regs_preadd_coef_10nm is
-- This template uses std_logic_vector type as the coefficient constant
-- It is possible use other preferred type, for example, signed/unsigned

-- Array type define for coef or ROM purpose
TYPE coef_type IS ARRAY(0 to ((2**SEL_WIDTH)-1)) of std_logic_vector((COEF_WIDTH-1) DOWNTO 0);

-- Coefficient storage (ROM inferencing template)
SIGNAL c1_coef : coef_type :=
			("001010111111101011",
			"001010111111101011",
			"001010110000001011",
			"001010000011101011",
			"001010111111101011",
			"001010111111101011",
			"001010100111101011",
			"110101111001110100");

signal c2_coef : coef_type :=
			("001010101001000110",
			"011010111111101011",
			"001011011000001010",
			"101010100011101011",
			"001010110101101010",
			"001010110111011011",
			"011010101110101010",
			"010101011010100100");

-- Coefficient selection result
signal c1_coef_wire   : signed ((COEF_WIDTH)-1 downto 0);
signal c2_coef_wire   : signed ((COEF_WIDTH)-1 downto 0);

-- Preadder result
signal ab1            : signed    ((AB_WIDTH) downto 0);
signal ab2            : signed    ((AB_WIDTH) downto 0);

-- Multiplier result
signal m1, m2 : signed ((MULT_OUTPUT_WIDTH-1) downto 0);

-- Input Register
signal a1_reg, a2_reg : signed    ((AB_WIDTH-1) downto 0);
signal b1_reg, b2_reg : signed    ((AB_WIDTH-1) downto 0);
signal c1_sel_reg     : std_logic_vector ((SEL_WIDTH)-1 downto 0);
signal c2_sel_reg     : std_logic_vector ((SEL_WIDTH)-1 downto 0);

-- Input Pipeline Register
signal a1_pipeline1_reg, a2_pipeline1_reg       : signed    ((AB_WIDTH-1) downto 0);
signal b1_pipeline1_reg, b2_pipeline1_reg       : signed    ((AB_WIDTH-1) downto 0);
signal c1_sel_pipeline1_reg    : std_logic_vector ((SEL_WIDTH)-1 downto 0);
signal c2_sel_pipeline1_reg    : std_logic_vector ((SEL_WIDTH)-1 downto 0);

-- Second Pipeline Register
signal a1_pipeline2_reg, a2_pipeline2_reg       : signed    ((AB_WIDTH-1) downto 0);
signal b1_pipeline2_reg, b2_pipeline2_reg       : signed    ((AB_WIDTH-1) downto 0);
signal c1_sel_pipeline2_reg    : std_logic_vector ((SEL_WIDTH)-1 downto 0);
signal c2_sel_pipeline2_reg    : std_logic_vector ((SEL_WIDTH)-1 downto 0);

-- Output Register
signal s_output_reg : signed ((FINAL_OUTPUT_WIDTH-1) downto 0);

--Disable synchronizer register identification
attribute altera_attribute : string;
attribute altera_attribute of a1_reg, a2_reg, b1_reg, b2_reg, c1_sel_reg, c2_sel_reg, a1_pipeline1_reg, a2_pipeline1_reg, b1_pipeline1_reg, b2_pipeline1_reg, c1_sel_pipeline1_reg, c2_sel_pipeline1_reg, a1_pipeline2_reg, a2_pipeline2_reg, b1_pipeline2_reg, b2_pipeline2_reg, c1_sel_pipeline2_reg, c2_sel_pipeline2_reg, s_output_reg : signal is "-name SYNCHRONIZER_IDENTIFICATION OFF";

begin

	-- Data Input register
	-- DSP supports single clock, 3 ena and 2 reset signals
	-- When preadder is used, the inputs to the preadder must use the same {ena}
	-- The coefficient select input may use a different clock enable than that of the preadder inputs.
	-- All registered inputs must use the same reset
	process(clock, aclr1)
	begin
		if (aclr1 = '1') then
			a1_reg <= (others => '0');
			b1_reg <= (others => '0');
			a2_reg <= (others => '0');
			b2_reg <= (others => '0');
			c1_sel_reg <= (others => '0');
			c2_sel_reg <= (others => '0');
		elsif rising_edge(clock) then

			if (ena1 = '1') then
				a1_reg <= a1;
				b1_reg <= b1;
				a2_reg <= a2;
				b2_reg <= b2;
				c1_sel_reg <= c1_sel;
			c2_sel_reg <= c2_sel;
			end if;

		end if;
	end process;

	-- Input pipeline register
	-- All input pipeline registers must use the same {ena, reset}
	-- The input pipeline register bank must use the same reset as the second pipeline and output register banks
	process(clock, aclr2)
	begin
		if (aclr2 = '1') then
			a1_pipeline1_reg <= (others => '0');
			b1_pipeline1_reg <= (others => '0');
			a2_pipeline1_reg <= (others => '0');
			b2_pipeline1_reg <= (others => '0');
			c1_sel_pipeline1_reg <= (others => '0');
			c2_sel_pipeline1_reg <= (others => '0');
		elsif rising_edge(clock) then

			if (ena2 = '1') then
				a1_pipeline1_reg <= a1_reg;
				b1_pipeline1_reg <= b1_reg;
				a2_pipeline1_reg <= a2_reg;
				b2_pipeline1_reg <= b2_reg;
				c1_sel_pipeline1_reg <= c1_sel_reg;
				c2_sel_pipeline1_reg <= c2_sel_reg;
			end if;

		end if;
	end process;

	-- Second pipeline register
	-- All second pipeline registers must use the same {ena, reset}
	-- The second pipeline register bank must use the same reset as the input pipeline and output register banks
	process(clock, aclr2)
	begin
		if (aclr2 = '1') then
			a1_pipeline2_reg <= (others => '0');
			b1_pipeline2_reg <= (others => '0');
			a2_pipeline2_reg <= (others => '0');
			b2_pipeline2_reg <= (others => '0');
			c1_sel_pipeline2_reg <= (others => '0');
			c2_sel_pipeline2_reg <= (others => '0');
		elsif rising_edge(clock) then

			if (ena2 = '1') then
				a1_pipeline2_reg <= a1_pipeline1_reg;
				b1_pipeline2_reg <= b1_pipeline1_reg;
				a2_pipeline2_reg <= a2_pipeline1_reg;
				b2_pipeline2_reg <= b2_pipeline1_reg;
				c1_sel_pipeline2_reg <= c1_sel_pipeline1_reg;
				c2_sel_pipeline2_reg <= c2_sel_pipeline1_reg;
			end if;

		end if;
	end process;

	-- Output register
	-- The output register bank must share the same reset with the input pipeline and second pipeline register banks
	process(clock, aclr2)
	begin
		if (aclr2 = '1') then
			s_output_reg <= (others => '0');
		elsif rising_edge(clock) then

			if (ena3 = '1') then
				-- Static add/sub is supported
				s_output_reg <= (resize(m1, FINAL_OUTPUT_WIDTH) + resize(m2, FINAL_OUTPUT_WIDTH));
			end if;

		end if;
	end process;

	-- Preadder
	-- Preadder supports static add/sub
	-- Both 18x18 in one DSP block must use preadder simultaneously
	-- Both 18x18 in one DSP block must have the same add/sub
	ab1 <= resize(a1_pipeline2_reg, AB_WIDTH+1) + resize(b1_pipeline2_reg, AB_WIDTH+1);
	ab2 <= resize(a2_pipeline2_reg, AB_WIDTH+1) + resize(b2_pipeline2_reg, AB_WIDTH+1);

	-- Coefficients
	c1_coef_wire <= signed(c1_coef(to_integer(unsigned(c1_sel_pipeline2_reg))));
	c2_coef_wire <= signed(c2_coef(to_integer(unsigned(c2_sel_pipeline2_reg))));

	-- Multiplier
	m1 <= c1_coef_wire * ab1;
	m2 <= c2_coef_wire * ab2;

	-- Final output
	final_output <= s_output_reg;


end rtl;
