# -*- mode: snippet -*-
# name: qpp-M18x19_systolic-with-Preadder-and-Coefficent
# key: qpp-DSP-Features-for-20-nm-Device-M18x19_systolic-with-Preadder-and-Coefficent
# group: qpp DSP-Features-for-20-nm-Device
# --
// M18x19_systolic with Preadder and Coefficent
-- Quartus Prime VHDL Template
-- 18x19systolic with full registers (input, pipeline and output) + preadder + coefficients
-- Formula: final_output[t] = ((a1[t-6]+b1[t-6])*c1_coef[t-6]) + ((a2[t-5]+b2[t-5])*c2_coef[t-5]) + ((a3[t-4]+b3[t-4])*c3_coef[t-4]) + (zero_bit_a+zero_bit_b)*c4_coef
--          where (zero_bit_a+zero_bit_b)*c4_coef is a dummy multiplier
-- Two 18x18 in one DSP block must use coefficient storage simultaneously
	-- Note: Systolic mode do not support dynamic negate and subtraction
-- For use with 20-nm device families
-- For more information on the 20nm DSP features, please refer to http://www.altera.com/literature/hb/arria-10/a10_dsp.pdf


library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity m18x19systolic_full_regs_preadd_coef is
	generic
	(
		-- This template will only work within the AxB data width range from 2x2 to 18x19.
		AB_WIDTH : natural := 18;
		COEF_WIDTH 	: natural := 18;
		-- up to 8 coefficients (3-bit address)
		SEL_WIDTH 	: natural := 3;
		-- The formula for the multipler width of one (A+B)xCoefficient.
		-- MULT_OUTPUT_WIDTH = (AB_WIDTH+1) + COEF_WIDTH
		MULT_OUTPUT_WIDTH : natural := (18 + 1)+ 18;
		-- This example uses n=4 multiplers (including dummy multiplier), hence the final output width is MULT_OUTPUT_WIDTH + (n-1)
		-- FINAL_OUTPUT_WIDTH = MULT_OUTPUT_WIDTH + 3
		FINAL_OUTPUT_WIDTH : natural := 37 +3
	);

	port
	(
		-- Data input ports
		a1	   : in signed	((AB_WIDTH-1) downto 0);
		b1	   : in signed	((AB_WIDTH-1) downto 0);
		a2	   : in signed	((AB_WIDTH-1) downto 0);
		b2	   : in signed	((AB_WIDTH-1) downto 0);
		a3	   : in signed	((AB_WIDTH-1) downto 0);
		b3	   : in signed	((AB_WIDTH-1) downto 0);
		-- Coefficient selection ports. Selection of up to 8 coefficients (3-bit address)
		c1_sel	: in std_logic_vector ((SEL_WIDTH)-1 downto 0);
		c2_sel	: in std_logic_vector ((SEL_WIDTH)-1 downto 0);
		c3_sel	: in std_logic_vector ((SEL_WIDTH)-1 downto 0);
		-- Register clock and control signals
		-- DSP supports up to 3 clock/ena pairs, and 2 async reset signals
		clock1	: in std_logic;
		clock2	: in std_logic;
		clock3	: in std_logic;
		ena1		: in std_logic;
		ena2		: in std_logic;
		ena3		: in std_logic;
		reset1	: in std_logic;
		reset2	: in std_logic;
		-- Output signal
		-- Max output width for chaining is 44
		final_output : out signed ((FINAL_OUTPUT_WIDTH-1) downto 0)
	);

end entity;

architecture rtl of m18x19systolic_full_regs_preadd_coef is
-- This template uses integer type as the coeffecient constant
-- Can use other preferred type, for example signed/unsigned

-- Array type define for coef or ROM purpose
TYPE coef_type IS ARRAY(0 to ((2**SEL_WIDTH)-1)) of std_logic_vector((COEF_WIDTH-1) DOWNTO 0);
TYPE zero_coef_type IS ARRAY(0 to 0) of std_logic_vector((COEF_WIDTH-1) DOWNTO 0);

-- Coefficient storage (ROM inferencing template)
signal c1_coef : coef_type :=
			("110101111001110100",
			"001010100111101011",
			"001010111111101011",
			"001010111111101011",
			"001010000011101011",
			"001010110000001011",
			"001010111111101011",
			"001010111111101011");

signal c2_coef : coef_type :=
			("010101011010100100",
			"011010101110101010",
			"001010110111011011",
			"001010110101101010",
			"101010100011101011",
			"001011011000001010",
			"011010111111101011",
			"001010101001000110");

signal c3_coef : coef_type :=
			("100101011001000110",
			"010100101111101011",
			"001001010000001010",
			"101011010101101011",
			"001000110101101010",
			"001010111000111011",
			"101010011010101010",
			"010101010101101100");

-- To fulfil even number requirement for systolic mode
signal c4_coef : zero_coef_type;

-- Coefficient selection result
signal c1_coef_wire	: signed ((COEF_WIDTH)-1 downto 0);
signal c2_coef_wire	: signed ((COEF_WIDTH)-1 downto 0);
signal c3_coef_wire	: signed ((COEF_WIDTH)-1 downto 0);
signal c4_coef_wire	: signed ((COEF_WIDTH)-1 downto 0);

-- Preadder result
signal ab1		   : signed	((AB_WIDTH) downto 0);
signal ab2			: signed	((AB_WIDTH) downto 0);
signal ab3			: signed	((AB_WIDTH) downto 0);
signal ab4			: signed	((AB_WIDTH) downto 0);

-- Multiplier result
signal m1, m2, m3, m4	: signed ((MULT_OUTPUT_WIDTH-1) downto 0);
-- Summation result
signal s1_reg, s2_reg, s3_reg, s4_reg	: signed ((FINAL_OUTPUT_WIDTH-1) downto 0);

-- Data Input Register
signal a1_reg, a2_reg, a3_reg, zero_bit_a_reg	   : signed	((AB_WIDTH-1) downto 0);
signal b1_reg, b2_reg, b3_reg, zero_bit_b_reg	   : signed	((AB_WIDTH-1) downto 0);
signal c1_sel_reg	: std_logic_vector ((SEL_WIDTH)-1 downto 0);
signal c2_sel_reg	: std_logic_vector ((SEL_WIDTH)-1 downto 0);
signal c3_sel_reg	: std_logic_vector ((SEL_WIDTH)-1 downto 0);
signal zero_bit_c_reg	: std_logic_vector ((SEL_WIDTH)-1 downto 0);

--Data Input Pipeline Register
signal a1_pipeline_reg, a2_pipeline_reg, a3_pipeline_reg,  zero_bit_a_pipeline_reg   : signed	((AB_WIDTH-1) downto 0);
signal b1_pipeline_reg, b2_pipeline_reg, b3_pipeline_reg,  zero_bit_b_pipeline_reg   : signed	((AB_WIDTH-1) downto 0);
signal c1_sel_pipeline_reg	: std_logic_vector ((SEL_WIDTH)-1 downto 0);
signal c2_sel_pipeline_reg	: std_logic_vector ((SEL_WIDTH)-1 downto 0);
signal c3_sel_pipeline_reg	: std_logic_vector ((SEL_WIDTH)-1 downto 0);
signal zero_bit_c_pipeline_reg	: std_logic_vector ((SEL_WIDTH)-1 downto 0);


-- When this template is used, the number of multipliers has to be even
-- A dummy 0x0 multiplier can be created if the number of multipliers is odd, to make up the number to even.
-- The following is required for the dummy multiplier.
signal zero_bit				: signed	(0 downto 0);
signal zero_bit_a				: signed	((AB_WIDTH-1) downto 0);
signal zero_bit_b				: signed	((AB_WIDTH-1) downto 0);
signal zero_bit_c				: std_logic_vector ((SEL_WIDTH-1) downto 0);
attribute preserve: boolean;
attribute preserve of zero_bit_a_reg: signal is true;
attribute preserve of zero_bit_b_reg: signal is true;
attribute preserve of zero_bit_a_pipeline_reg: signal is true;
attribute preserve of zero_bit_b_pipeline_reg: signal is true;


begin

	-- Input register (for DATA and DYNAMIC CONTROL SIGNAL)
	-- All input registers must use the same reset signal,
	-- Each DATA input register may have different pair of clock and ena signal.
	-- The DYNAMIC CONTROL SIGNAL input registers(e.g. sub and negate) can have different clock/ena signal pair than that of the DATA input register.
-- But all DYNAMIC CONTROL SIGNAL input registers must share the same clock and ena signal.
	process(clock1, reset1)
	begin
		if (reset1 = '1') then
		-- Input registers (for DATA)
			a1_reg <= (others => '0');
			b1_reg <= (others => '0');
			a2_reg <= (others => '0');
			b2_reg <= (others => '0');
			a3_reg <= (others => '0');
			b3_reg <= (others => '0');
			c1_sel_reg <= (others => '0');
			c2_sel_reg <= (others => '0');
			c3_sel_reg <= (others => '0');
			zero_bit_a_reg <= (others => '0');
			zero_bit_b_reg <= (others => '0');
			zero_bit_c_reg <= (others => '0');
		elsif rising_edge(clock1) then

			if (ena1 = '1') then
				a1_reg <= a1;
				b1_reg <= b1;
				a2_reg <= a2;
				b2_reg <= b2;
				a3_reg <= a3;
				b3_reg <= b3;
				c1_sel_reg <= c1_sel;
				c2_sel_reg <= c2_sel;
				c3_sel_reg <= c3_sel;
				zero_bit_a_reg <= zero_bit_a;
				zero_bit_b_reg <= zero_bit_b;
				zero_bit_c_reg <= zero_bit_c;
			end if;

		end if;

	end process;

	-- Input pipeline register (for DATA and DYNAMIC CONTROL SIGNAL)
	-- All pipeline registers must use the same {clock, ena, reset}
	-- The Pipeline registers must use the same reset as the output register
	-- The DYNAMIC CONTROL SIGNAL input pipeline registers can be bypassed differently
	process(clock2, reset2)
	begin
		if (reset2 = '1') then
		-- Input pipeline registers (for DATA)
			a1_pipeline_reg <= (others => '0');
			b1_pipeline_reg <= (others => '0');
			a2_pipeline_reg <= (others => '0');
			b2_pipeline_reg <= (others => '0');
			a3_pipeline_reg <= (others => '0');
			b3_pipeline_reg <= (others => '0');
			c1_sel_pipeline_reg <= (others => '0');
			c2_sel_pipeline_reg <= (others => '0');
			c3_sel_pipeline_reg <= (others => '0');
			zero_bit_a_pipeline_reg <= (others => '0');
			zero_bit_b_pipeline_reg <= (others => '0');
			zero_bit_c_pipeline_reg <= (others => '0');
		elsif rising_edge(clock2) then

			if (ena2 = '1') then
				a1_pipeline_reg <= a1_reg;
				b1_pipeline_reg <= b1_reg;
				a2_pipeline_reg <= a2_reg;
				b2_pipeline_reg <= b2_reg;
				a3_pipeline_reg <= a3_reg;
				b3_pipeline_reg <= b3_reg;
				c1_sel_pipeline_reg <= c1_sel_reg;
				c2_sel_pipeline_reg <= c2_sel_reg;
				c3_sel_pipeline_reg <= c3_sel_reg;
				zero_bit_a_pipeline_reg <= zero_bit_a_reg;
				zero_bit_b_pipeline_reg <= zero_bit_b_reg;
				zero_bit_c_pipeline_reg <= zero_bit_c_reg;
			end if;

		end if;

	end process;

-- Output register
	-- Output register must share the same reset with input pipeline register
	-- Even though the output registers are not explicitly declared, they will be inferred later during compilation. Thus, it is important to place the s1-s5 operation
	-- within the output register enable(ena3)=1 condition.
	process(clock3, reset2)
	begin
		if (reset2 = '1') then
			s1_reg <= (others => '0');
			s2_reg <= (others => '0');
			s3_reg <= (others => '0');
			s4_reg <= (others => '0');
		elsif rising_edge(clock3) then

			if (ena3 = '1') then

				s1_reg <= resize(m1, FINAL_OUTPUT_WIDTH);
				--static add/sub supported
				s2_reg <= s1_reg + resize(m2, FINAL_OUTPUT_WIDTH);
				s3_reg <= s2_reg - resize(m3, FINAL_OUTPUT_WIDTH);
				s4_reg <= s3_reg + resize(m4, FINAL_OUTPUT_WIDTH);

			end if;

		end if;

	end process;

	-- Assign zero bit
	zero_bit <= B"0";
	zero_bit_a <= resize(zero_bit, AB_WIDTH);
	zero_bit_b <= resize(zero_bit, AB_WIDTH);
	zero_bit_c <= std_logic_vector(resize(zero_bit, SEL_WIDTH));

	-- Preadder
	-- Preadder supports static add/sub
	-- Both 18x18 in one DSP block must use preadder simultaneously
	-- Both 18x18 in one DSP block must have the same add/sub
	ab1 <= resize(a1_pipeline_reg, AB_WIDTH+1) + resize(b1_pipeline_reg, AB_WIDTH+1);
	ab2 <= resize(a2_pipeline_reg, AB_WIDTH+1) + resize(b2_pipeline_reg, AB_WIDTH+1);
	ab3 <= resize(a3_pipeline_reg, AB_WIDTH+1) + resize(b3_pipeline_reg, AB_WIDTH+1);
	ab4 <= resize(zero_bit_a_pipeline_reg, AB_WIDTH+1) + resize(zero_bit_b_pipeline_reg, AB_WIDTH+1);

	-- Coefficients
	c4_coef(0) <= ("000000000000000000");
	c1_coef_wire <= signed(c1_coef(to_integer(unsigned(c1_sel_pipeline_reg))));
	c2_coef_wire <= signed(c2_coef(to_integer(unsigned(c2_sel_pipeline_reg))));
	c3_coef_wire <= signed(c3_coef(to_integer(unsigned(c3_sel_pipeline_reg))));
	c4_coef_wire <= signed(c4_coef(to_integer(unsigned(zero_bit_c_pipeline_reg))));


	-- Multiplier
	m1 <= resize(c1_coef_wire,COEF_WIDTH) * resize(ab1,AB_WIDTH+1);
	m2 <= resize(c2_coef_wire,COEF_WIDTH) * resize(ab2,AB_WIDTH+1);
	m3 <= resize(c3_coef_wire,COEF_WIDTH) * resize(ab3,AB_WIDTH+1);
	-- When this template is used, the number of multipliers has to be even
-- Create a 0x0 multiplier as below to make up for the even number requirement if the number of multipliers is odd
	m4 <= resize(c4_coef_wire,COEF_WIDTH) * resize(ab4,AB_WIDTH+1);

	-- Final output
	final_output <= s4_reg;

end rtl;
