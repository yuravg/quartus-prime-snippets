# -*- mode: snippet -*-
# name: qpp-M18x19_systolic-with-Preadder-and-Coefficent-using-ACLR
# key: qpp-DSP-Features-for-10-nm-Device-M18x19_systolic-with-Preadder-and-Coefficent-using-ACLR
# group: qpp DSP-Features-for-10-nm-Device
# --
// M18x19_systolic with Preadder and Coefficent using ACLR
-- Quartus Prime VHDL Template
-- 18x19_systolic with full registers (input, 2 pipeline stages and output) using asynchronous clear + preadder + coefficients
-- Formula: final_output[t] = ((a1[t-6]+b1[t-6])*c1_coef[t-6]) + ((a2[t-5]+b2[t-5])*c2_coef[t-5]) - ((a3[t-4]+b3[t-4])*c3_coef[t-4]) + (zero_bit_a+zero_bit_b)*c0_coef
--          where (zero_bit_a+zero_bit_b)*c0_coef is a dummy multiplier
-- When this template is used, the number of multipliers has to be even
-- A dummy 0x0 multiplier can be created if the number of multipliers is odd to make up the number to even.
-- Both multipliers in one DSP block must use coefficient inputs simultaneously
-- For use with 10-nm device families
-- All registers support asynchronous or synchronous clear but all registers within the same design must use the same clear type
-- When synchronous clear is used, the ena signal has a higher priority than the clear signal
-- Synchronizer register identification is disabled in all registers used in this template to ensure the DSP block's internal registers are fully packed for maximum DSP performance (fMAX). Ensure proper timing constraints are done if this template is used in asynchronous clock domains to avoid potential metastability issue. For more information on managing metastability in Quartus, refer to https://www.altera.co.jp/ja_JP/pdfs/literature/hb/qts/qts_qii51018.pdf

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity m18x19_systolic_full_regs_preadd_coef_10nm is
	generic
	(
		-- This template will only work within the AxB data width range from 2x2 to 18x19.
		AB_WIDTH   : natural := 18;
		COEF_WIDTH : natural := 18;
		-- up to 8 coefficients (3-bit address)
		SEL_WIDTH  : natural := 3;
		-- The formula for the multipler width of one (A+B)xCoefficient.
		-- MULT_OUTPUT_WIDTH = (AB_WIDTH+1) + COEF_WIDTH
		MULT_OUTPUT_WIDTH : natural := (18 + 1)+ 18;
		-- This example uses n=4 multiplers (including dummy multiplier), hence the final output width is MULT_OUTPUT_WIDTH + (n-1)
		-- FINAL_OUTPUT_WIDTH = MULT_OUTPUT_WIDTH + 3
		FINAL_OUTPUT_WIDTH : natural := 37 +3
	);

	port
	(
		-- Data input ports
		a1       : in signed    ((AB_WIDTH-1) downto 0);
		b1       : in signed    ((AB_WIDTH-1) downto 0);
		a2       : in signed    ((AB_WIDTH-1) downto 0);
		b2       : in signed    ((AB_WIDTH-1) downto 0);
		a3       : in signed    ((AB_WIDTH-1) downto 0);
		b3       : in signed    ((AB_WIDTH-1) downto 0);
		-- Coefficient selection ports. Selection of up to 8 coefficients (3-bit address)
		c1_sel    : in std_logic_vector ((SEL_WIDTH)-1 downto 0);
		c2_sel    : in std_logic_vector ((SEL_WIDTH)-1 downto 0);
		c3_sel    : in std_logic_vector ((SEL_WIDTH)-1 downto 0);
		-- Register clock and control signals
		-- DSP supports single clock, 3 ena, and 2 reset signals
		clock    : in std_logic;
		ena1      : in std_logic;
		ena2      : in std_logic;
		ena3      : in std_logic;
		aclr1     : in std_logic;
		aclr2     : in std_logic;
		-- Output signal
		-- Max output width for chaining is 44
		final_output : out signed ((FINAL_OUTPUT_WIDTH-1) downto 0)
	);

end entity;

architecture rtl of m18x19_systolic_full_regs_preadd_coef_10nm is
-- This template uses std_logic_vector type as the coeffecient constant
-- It is possible to use other preferred type, for example, signed/unsigned

-- Array type define for coef or ROM purpose
TYPE coef_type IS ARRAY(0 to ((2**SEL_WIDTH)-1)) of std_logic_vector((COEF_WIDTH-1) DOWNTO 0);

-- Coefficient storage (ROM inferencing template)
signal c1_coef : coef_type :=
			("001010111111101011",
			"001010111111101011",
			"001010110000001011",
			"001010000011101011",
			"001010111111101011",
			"001010111111101011",
			"001010100111101011",
			"110101111001110100");

signal c2_coef : coef_type :=
			("001010101001000110",
			"011010111111101011",
			"001011011000001010",
			"101010100011101011",
			"001010110101101010",
			"001010110111011011",
			"011010101110101010",
			"010101011010100100");

signal c3_coef : coef_type :=
			("100101011001000110",
			"010100101111101011",
			"001001010000001010",
			"101011010101101011",
			"001000110101101010",
			"001010111000111011",
			"101010011010101010",
			"010101010101101100");

-- To fulfil even number requirement for systolic mode
signal c0_coef : coef_type :=
			("000000000000000000",
			"000000000000000000",
			"000000000000000000",
			"000000000000000000",
			"000000000000000000",
			"000000000000000000",
			"000000000000000000",
			"000000000000000000");

-- Coefficient selection result
signal c0_coef_wire    : signed ((COEF_WIDTH)-1 downto 0);
signal c1_coef_wire    : signed ((COEF_WIDTH)-1 downto 0);
signal c2_coef_wire    : signed ((COEF_WIDTH)-1 downto 0);
signal c3_coef_wire    : signed ((COEF_WIDTH)-1 downto 0);

-- Preadder result
signal ab0            : signed    ((AB_WIDTH) downto 0);
signal ab1            : signed    ((AB_WIDTH) downto 0);
signal ab2            : signed    ((AB_WIDTH) downto 0);
signal ab3            : signed    ((AB_WIDTH) downto 0);

-- Multiplier result
signal m1, m2, m3, m0    : signed ((MULT_OUTPUT_WIDTH-1) downto 0);
-- Summation result
signal s1_reg, s2_reg, s3_reg, s0_reg    : signed ((FINAL_OUTPUT_WIDTH-1) downto 0);

-- Data Input Register
signal a1_reg, a2_reg, a3_reg, zero_bit_a_reg       : signed    ((AB_WIDTH-1) downto 0);
signal b1_reg, b2_reg, b3_reg, zero_bit_b_reg       : signed    ((AB_WIDTH-1) downto 0);
signal c1_sel_reg    : std_logic_vector ((SEL_WIDTH)-1 downto 0);
signal c2_sel_reg    : std_logic_vector ((SEL_WIDTH)-1 downto 0);
signal c3_sel_reg    : std_logic_vector ((SEL_WIDTH)-1 downto 0);
signal zero_bit_c_reg    : std_logic_vector ((SEL_WIDTH)-1 downto 0);

-- Data Input Pipeline Register
signal a1_pipeline1_reg, a2_pipeline1_reg, a3_pipeline1_reg,  zero_bit_a_pipeline1_reg   : signed    ((AB_WIDTH-1) downto 0);
signal b1_pipeline1_reg, b2_pipeline1_reg, b3_pipeline1_reg,  zero_bit_b_pipeline1_reg   : signed    ((AB_WIDTH-1) downto 0);
signal c1_sel_pipeline1_reg    : std_logic_vector ((SEL_WIDTH)-1 downto 0);
signal c2_sel_pipeline1_reg    : std_logic_vector ((SEL_WIDTH)-1 downto 0);
signal c3_sel_pipeline1_reg    : std_logic_vector ((SEL_WIDTH)-1 downto 0);
signal zero_bit_c_pipeline1_reg    : std_logic_vector ((SEL_WIDTH)-1 downto 0);

-- Data Input Second Pipeline Register
signal a1_pipeline2_reg, a2_pipeline2_reg, a3_pipeline2_reg,  zero_bit_a_pipeline2_reg   : signed    ((AB_WIDTH-1) downto 0);
signal b1_pipeline2_reg, b2_pipeline2_reg, b3_pipeline2_reg,  zero_bit_b_pipeline2_reg   : signed    ((AB_WIDTH-1) downto 0);
signal c1_sel_pipeline2_reg    : std_logic_vector ((SEL_WIDTH)-1 downto 0);
signal c2_sel_pipeline2_reg    : std_logic_vector ((SEL_WIDTH)-1 downto 0);
signal c3_sel_pipeline2_reg    : std_logic_vector ((SEL_WIDTH)-1 downto 0);
signal zero_bit_c_pipeline2_reg    : std_logic_vector ((SEL_WIDTH)-1 downto 0);

-- The following is required for the dummy multiplier.
signal zero_bit                  : signed    (0 downto 0);
signal zero_bit_a                : signed    ((AB_WIDTH-1) downto 0);
signal zero_bit_b                : signed    ((AB_WIDTH-1) downto 0);
signal zero_bit_c                : std_logic_vector ((SEL_WIDTH-1) downto 0);
attribute preserve: boolean;
attribute preserve of zero_bit_a_reg: signal is true;
attribute preserve of zero_bit_b_reg: signal is true;
attribute preserve of zero_bit_c_reg: signal is true;
attribute preserve of zero_bit_a_pipeline1_reg: signal is true;
attribute preserve of zero_bit_b_pipeline1_reg: signal is true;
attribute preserve of zero_bit_c_pipeline1_reg: signal is true;
attribute preserve of zero_bit_a_pipeline2_reg: signal is true;
attribute preserve of zero_bit_b_pipeline2_reg: signal is true;
attribute preserve of zero_bit_c_pipeline2_reg: signal is true;

--Disable synchronizer register identification
attribute altera_attribute : string;
attribute altera_attribute of a1_reg, a2_reg, a3_reg, zero_bit_a_reg, b1_reg, b2_reg, b3_reg, zero_bit_b_reg, c1_sel_reg, c2_sel_reg, c3_sel_reg, zero_bit_c_reg, a1_pipeline1_reg, a2_pipeline1_reg, a3_pipeline1_reg, zero_bit_a_pipeline1_reg, b1_pipeline1_reg, b2_pipeline1_reg, b3_pipeline1_reg, zero_bit_b_pipeline1_reg, c1_sel_pipeline1_reg, c2_sel_pipeline1_reg, c3_sel_pipeline1_reg, zero_bit_c_pipeline1_reg, a1_pipeline2_reg, a2_pipeline2_reg, a3_pipeline2_reg,  zero_bit_a_pipeline2_reg, b1_pipeline2_reg, b2_pipeline2_reg, b3_pipeline2_reg,  zero_bit_b_pipeline2_reg, c1_sel_pipeline2_reg, c2_sel_pipeline2_reg, c3_sel_pipeline2_reg, zero_bit_c_pipeline2_reg, s1_reg, s2_reg, s3_reg, s0_reg : signal is "-name SYNCHRONIZER_IDENTIFICATION OFF";

begin

	-- Input register (for DATA and DYNAMIC CONTROL SIGNAL)
	-- All input registers must use the same reset signal,
	-- Each DATA input register may hava different ena signal.
	-- The DYNAMIC CONTROL SIGNAL input registers(e.g. sub and negate) can have different ena signal than that of the DATA input register.
	-- But all DYNAMIC CONTROL SIGNAL input registers must share the same ena signal.
	process(clock, aclr1)
	begin
		if (aclr1 = '1') then
		-- Input registers (for DATA)
			a1_reg <= (others => '0');
			b1_reg <= (others => '0');
			a2_reg <= (others => '0');
			b2_reg <= (others => '0');
			a3_reg <= (others => '0');
			b3_reg <= (others => '0');
			c1_sel_reg <= (others => '0');
			c2_sel_reg <= (others => '0');
			c3_sel_reg <= (others => '0');
			zero_bit_a_reg <= (others => '0');
			zero_bit_b_reg <= (others => '0');
			zero_bit_c_reg <= (others => '0');
		elsif rising_edge(clock) then

			if (ena1 = '1') then
				a1_reg <= a1;
				b1_reg <= b1;
				a2_reg <= a2;
				b2_reg <= b2;
				a3_reg <= a3;
				b3_reg <= b3;
				c1_sel_reg <= c1_sel;
				c2_sel_reg <= c2_sel;
				c3_sel_reg <= c3_sel;
				zero_bit_a_reg <= zero_bit_a;
				zero_bit_b_reg <= zero_bit_b;
				zero_bit_c_reg <= zero_bit_c;
			end if;

		end if;
	end process;

	-- Input pipeline register (for DATA and DYNAMIC CONTROL SIGNAL)
	-- All input pipeline registers must use the same {ena, reset}
	-- The input pipeline register bank must use the same reset as the second pipeline and output register banks
	-- The DYNAMIC CONTROL SIGNAL input pipeline registers can be bypassed differently
	process(clock, aclr2)
	begin
		if (aclr2 = '1') then
			a1_pipeline1_reg <= (others => '0');
			b1_pipeline1_reg <= (others => '0');
			a2_pipeline1_reg <= (others => '0');
			b2_pipeline1_reg <= (others => '0');
			a3_pipeline1_reg <= (others => '0');
			b3_pipeline1_reg <= (others => '0');
			c1_sel_pipeline1_reg <= (others => '0');
			c2_sel_pipeline1_reg <= (others => '0');
			c3_sel_pipeline1_reg <= (others => '0');
			zero_bit_a_pipeline1_reg <= (others => '0');
			zero_bit_b_pipeline1_reg <= (others => '0');
			zero_bit_c_pipeline1_reg <= (others => '0');
		elsif rising_edge(clock) then

			if (ena2 = '1') then
				a1_pipeline1_reg <= a1_reg;
				b1_pipeline1_reg <= b1_reg;
				a2_pipeline1_reg <= a2_reg;
				b2_pipeline1_reg <= b2_reg;
				a3_pipeline1_reg <= a3_reg;
				b3_pipeline1_reg <= b3_reg;
				c1_sel_pipeline1_reg <= c1_sel_reg;
				c2_sel_pipeline1_reg <= c2_sel_reg;
				c3_sel_pipeline1_reg <= c3_sel_reg;
				zero_bit_a_pipeline1_reg <= zero_bit_a_reg;
				zero_bit_b_pipeline1_reg <= zero_bit_b_reg;
				zero_bit_c_pipeline1_reg <= zero_bit_c_reg;
			end if;

		end if;
	end process;

	-- Second pipeline register (for DATA and DYNAMIC CONTROL SIGNAL)
	-- All second pipeline registers must use the same {ena, reset}
	-- For systolic designs, the second pipeline register bank must use the same {ena, reset} as the output register bank
	-- The DYNAMIC CONTROL SIGNAL second pipeline registers can be bypassed differently
	process(clock, aclr2)
	begin
		if (aclr2 = '1') then
			a1_pipeline2_reg <= (others => '0');
			b1_pipeline2_reg <= (others => '0');
			a2_pipeline2_reg <= (others => '0');
			b2_pipeline2_reg <= (others => '0');
			a3_pipeline2_reg <= (others => '0');
			b3_pipeline2_reg <= (others => '0');
			c1_sel_pipeline2_reg <= (others => '0');
			c2_sel_pipeline2_reg <= (others => '0');
			c3_sel_pipeline2_reg <= (others => '0');
			zero_bit_a_pipeline2_reg <= (others => '0');
			zero_bit_b_pipeline2_reg <= (others => '0');
			zero_bit_c_pipeline2_reg <= (others => '0');
		elsif rising_edge(clock) then

			if (ena3 = '1') then
				a1_pipeline2_reg <= a1_pipeline1_reg;
				b1_pipeline2_reg <= b1_pipeline1_reg;
				a2_pipeline2_reg <= a2_pipeline1_reg;
				b2_pipeline2_reg <= b2_pipeline1_reg;
				a3_pipeline2_reg <= a3_pipeline1_reg;
				b3_pipeline2_reg <= b3_pipeline1_reg;
				c1_sel_pipeline2_reg <= c1_sel_pipeline1_reg;
				c2_sel_pipeline2_reg <= c2_sel_pipeline1_reg;
				c3_sel_pipeline2_reg <= c3_sel_pipeline1_reg;
				zero_bit_a_pipeline2_reg <= zero_bit_a_pipeline1_reg;
				zero_bit_b_pipeline2_reg <= zero_bit_b_pipeline1_reg;
				zero_bit_c_pipeline2_reg <= zero_bit_c_pipeline1_reg;
			end if;

		end if;
	end process;

	-- Output register
	-- The output register bank must share the same reset with input pipeline and second pipeline register banks
	process(clock, aclr2)
	begin
		if (aclr2 = '1') then
			s0_reg <= (others => '0');
			s1_reg <= (others => '0');
			s2_reg <= (others => '0');
			s3_reg <= (others => '0');
		elsif rising_edge(clock) then

			if (ena3 = '1') then
				s0_reg <= resize(m0, FINAL_OUTPUT_WIDTH);
				--static add/sub supported
				s1_reg <= s0_reg + resize(m1, FINAL_OUTPUT_WIDTH);
				s2_reg <= s1_reg + resize(m2, FINAL_OUTPUT_WIDTH);
				s3_reg <= s2_reg - resize(m3, FINAL_OUTPUT_WIDTH);
			end if;

		end if;
	end process;

	-- Assign zero bit
	zero_bit <= B"0";
	zero_bit_a <= resize(zero_bit, AB_WIDTH);
	zero_bit_b <= resize(zero_bit, AB_WIDTH);
	zero_bit_c <= std_logic_vector(resize(zero_bit, SEL_WIDTH));

	-- Preadder
	-- Preadder supports static add/sub
	-- Both 18x18 in one DSP block must use preadder simultaneously
	-- Both 18x18 in one DSP block must have the same add/sub
	ab0 <= resize(zero_bit_a_pipeline2_reg, AB_WIDTH+1) + resize(zero_bit_b_pipeline2_reg, AB_WIDTH+1);
	ab1 <= resize(a1_pipeline2_reg, AB_WIDTH+1) + resize(b1_pipeline2_reg, AB_WIDTH+1);
	ab2 <= resize(a2_pipeline2_reg, AB_WIDTH+1) + resize(b2_pipeline2_reg, AB_WIDTH+1);
	ab3 <= resize(a3_pipeline2_reg, AB_WIDTH+1) + resize(b3_pipeline2_reg, AB_WIDTH+1);

	-- Coefficients
	c0_coef_wire <= signed(c0_coef(to_integer(unsigned(zero_bit_c_pipeline2_reg))));
	c1_coef_wire <= signed(c1_coef(to_integer(unsigned(c1_sel_pipeline2_reg))));
	c2_coef_wire <= signed(c2_coef(to_integer(unsigned(c2_sel_pipeline2_reg))));
	c3_coef_wire <= signed(c3_coef(to_integer(unsigned(c3_sel_pipeline2_reg))));


	-- Multiplier
	m1 <= resize(c1_coef_wire,COEF_WIDTH) * resize(ab1,AB_WIDTH+1);
	m2 <= resize(c2_coef_wire,COEF_WIDTH) * resize(ab2,AB_WIDTH+1);
	m3 <= resize(c3_coef_wire,COEF_WIDTH) * resize(ab3,AB_WIDTH+1);
	-- When this template is used, the number of multipliers has to be even
	-- Create a 0x0 multiplier as below to make up for the even number requirement if the number of multipliers is odd
	m0 <= resize(c0_coef_wire,COEF_WIDTH) * resize(ab0,AB_WIDTH+1);

	-- Final output
	final_output <= s3_reg;

end rtl;
