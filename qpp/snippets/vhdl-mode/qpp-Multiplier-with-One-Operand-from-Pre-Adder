# -*- mode: snippet -*-
# name: qpp-Multiplier-with-One-Operand-from-Pre-Adder
# key: qpp-DSP-Features-for-28-nm-Device-Multiplier-with-One-Operand-from-Pre-Adder
# group: qpp DSP-Features-for-28-nm-Device
# --
// Multiplier with One Operand from Pre-Adder
-- Quartus Prime VHDL Template
-- Multiplier with one operand from pre-adder
-- For use with the 28-nm device families

-- This template can be used with 27x27, sum-of-2 27x27 modes on Stratix-V
--      Preadder supports 26-bit preadder (25-bit operands), c input supports 22-bit
-- This template can be used with 18x19(signed), sum-of-2 18x19(signed), 27x27 modes on Arria-V and Cyclone-V
--      Preadder supports 19(signed)/27-bit preadder (18(signed)/26-bit operands), c input supports 18/27-bit

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity preadder_input is
	generic
	(
		AB_WIDTH : natural := 25;
		C_WIDTH 	: natural := 22
	);

	port
	(
		a	   : in signed	((AB_WIDTH-1) downto 0);
		b	   : in signed	((AB_WIDTH-1) downto 0);
		c	   : in signed	((C_WIDTH-1) downto 0);
		-- DSP supports up to 3 clock/ena pairs and 2 async reset signals
		-- When preadder is used, all registered data inputs must use the same {clock, ena, reset}
		clock : in std_logic;
		ena	: in std_logic;
		reset	: in std_logic;
		s		: out signed ((AB_WIDTH+C_WIDTH) downto 0)
	);

end entity;

architecture rtl of preadder_input is

signal a_reg, b_reg				: signed	((AB_WIDTH-1) downto 0);
signal ab			   			: signed	((AB_WIDTH) downto 0);
signal c_reg						: signed	((C_WIDTH-1) downto 0);

-- Pick an applicable basic mode template
component single_mult
	generic
	(
		A_WIDTH : natural := 18;
		B_WIDTH : natural := 18
	);

	port
	(
		a	   : in signed	((A_WIDTH-1) downto 0);
		b	   : in signed	((B_WIDTH-1) downto 0);
		p 		: out signed ((A_WIDTH+B_WIDTH-1) downto 0)
	);

end component;

begin

-- Preadder
-- Preadder supports static add/sub
ab <= resize(a_reg, AB_WIDTH+1) + resize(b_reg, AB_WIDTH+1);

process(clock, reset)
begin
	if (reset = '1') then

		a_reg <= (others => '0');
		b_reg <= (others => '0');
		c_reg <= (others => '0');

	elsif rising_edge(clock) then

		if (ena = '1') then
			a_reg <= a;
			b_reg <= b;
			c_reg <= c;
		end if;

	end if;

end process;

dsp0 : single_mult
	generic map
	(
		A_WIDTH => AB_WIDTH+1,
		B_WIDTH => C_WIDTH
	)
	port MAP
	(
		a	=> ab,
		b	=> c_reg,
		p 	=> s
	);

end rtl;
