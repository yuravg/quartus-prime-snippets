# -*- mode: snippet -*-
# name: qpp-Simple-Dual-Port-RAM-(with-enable-signals)
# key: qpp-RAMs-and-ROMs-Simple-Dual-Port-RAM-(with-enable-signals)
# --
// Simple Dual-Port RAM (with enable signals)
-- Quartus Prime VHDL Template
-- Simple Dual Port RAM with write enable, read enable, and clock enable

library ieee;
use ieee.std_logic_1164.all;

entity simple_dual_port_ram_with_enables is

	generic
	(
		DATA_WIDTH : natural := 8;
		ADDR_WIDTH : natural := 6
	);

	port
	(
		clk		: in std_logic;
		waddr	: in natural range 0 to 2**ADDR_WIDTH - 1;
		raddr	: in natural range 0 to 2**ADDR_WIDTH - 1;
		data	: in std_logic_vector((DATA_WIDTH-1) downto 0);
		ce		: in std_logic := '1';
		we		: in std_logic := '1';
		re		: in std_logic := '1';
		q		: out std_logic_vector((DATA_WIDTH -1) downto 0)
	);

end simple_dual_port_ram_with_enables;

architecture rtl of simple_dual_port_ram_with_enables is

	-- Build a 2-D array type for the RAM
	subtype word_t is std_logic_vector((DATA_WIDTH-1) downto 0);
	type memory_t is array(2**ADDR_WIDTH-1 downto 0) of word_t;

	-- Declare the RAM
	shared variable ram : memory_t;

begin


	-- Port A
	process(clk)
	begin
	if(rising_edge(clk)) then
		if(ce = '1') THEN
			if(we = '1') then
				ram(waddr) := data;
			end if;
			if(re = '1') then
				q <= ram(raddr);
			end if;
		end if;
	end if;
	end process;


end rtl;
