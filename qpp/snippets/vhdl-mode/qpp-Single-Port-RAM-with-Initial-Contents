# -*- mode: snippet -*-
# name: qpp-Single-Port-RAM-with-Initial-Contents
# key: qpp-RAMs-and-ROMs-Single-Port-RAM-with-Initial-Contents
# group: qpp RAMs-and-ROMs
# --
// Single-Port RAM with Initial Contents
-- Quartus Prime VHDL Template
-- Single-port RAM with single read/write address and initial contents

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity single_port_ram_with_init is

	generic
	(
		DATA_WIDTH : natural := 8;
		ADDR_WIDTH : natural := 6
	);

	port
	(
		clk		: in std_logic;
		addr	: in natural range 0 to 2**ADDR_WIDTH - 1;
		data	: in std_logic_vector((DATA_WIDTH-1) downto 0);
		we		: in std_logic := '1';
		q		: out std_logic_vector((DATA_WIDTH -1) downto 0)
	);

end single_port_ram_with_init;

architecture rtl of single_port_ram_with_init is

	-- Build a 2-D array type for the RAM
	subtype word_t is std_logic_vector((DATA_WIDTH-1) downto 0);
	type memory_t is array(2**ADDR_WIDTH-1 downto 0) of word_t;

	function init_ram
		variable tmp : memory_t := (others => (others => '0'));
	begin
		for addr_pos in 0 to 2**ADDR_WIDTH - 1 loop
			-- Initialize each address with the address itself
			tmp(addr_pos) := std_logic_vector(to_unsigned(addr_pos, DATA_WIDTH));
		end loop;
		return tmp;
	end init_ram;

	-- Declare the RAM signal and specify a default value.	Quartus Prime
	-- will create a memory initialization file (.mif) based on the
	-- default value.
	signal ram : memory_t := init_ram;

begin

	process(clk)
	begin
	if(rising_edge(clk)) then
		-- Read returns OLD data. To return NEW data, use the following code:
		-- if(we = '1') then
		--     ram(addr) <= data;
		--     q <= data;
		-- else
		--     q <= ram(addr);
		-- end if;
		-- NOTE: NEW data requires extra bypass logic around the RAM on Stratix10.

		if(we = '1') then
			ram(addr) <= data;
		end if;
		q <= ram(addr);

		end if;
	end process;

end rtl;
