# -*- mode: snippet -*-
# name: qps-Byte-enabled-True-Dual-Port-RAM-ProOnly
# key: qps-RAMs-and-ROMs-Byte-enabled-True-Dual-Port-RAM-ProOnly
# --
// Byte-enabled True Dual Port RAM
pro_edition_only
-- Quartus Prime VHDL Template
-- True Dual-Port RAM with single clock
-- and individual controls for writing into separate bytes of the memory word (byte-enable)
--
-- Read-during-write returns either new or old data depending
-- on the order in which the simulator executes the process statements.
-- Quartus Prime will consider this read-during-write scenario as a
-- don't care condition to optimize the performance of the RAM.  If you
-- need a read-during-write behavior to be determined, you
-- must instantiate the altsyncram Megafunction directly.

library ieee;
use ieee.std_logic_1164.all;
library work;

entity byte_enabled_true_dual_port_ram is

	generic (
		ADDR_WIDTH : natural := 8;
		BYTE_WIDTH : natural := 8;
		BYTES : natural := 4);

	port (
		we1, we2, clk : in  std_logic;
		be1      : in  std_logic_vector (BYTES - 1 downto 0);
		be2      : in  std_logic_vector (BYTES - 1 downto 0);
		data_in1 : in  std_logic_vector(BYTES*BYTE_WIDTH - 1 downto 0);
		data_in2 : in  std_logic_vector(BYTES*BYTE_WIDTH - 1 downto 0);
		addr1   : in  integer range 0 to 2 ** ADDR_WIDTH -1 ;
		addr2   : in  integer range 0 to 2 ** ADDR_WIDTH - 1;
		data_out1 : out std_logic_vector(BYTES*BYTE_WIDTH-1 downto 0);
		data_out2 : out std_logic_vector(BYTES*BYTE_WIDTH-1 downto 0));
end byte_enabled_true_dual_port_ram;

architecture rtl of byte_enabled_true_dual_port_ram is
	--  build up 2D array to hold the memory
	type word_t is array (0 to BYTES-1) of std_logic_vector(BYTE_WIDTH-1 downto 0);
	type ram_t is array (0 to 2 ** ADDR_WIDTH - 1) of word_t;

	shared variable ram : ram_t;

	signal q1_local : word_t;
	signal q2_local : word_t;

begin  -- rtl
	-- Reorganize the read data from the RAM to match the output
	unpack: for i in 0 to BYTES - 1 generate
		data_out1(BYTE_WIDTH*(i+1) - 1 downto BYTE_WIDTH*i) <= q1_local(i);
		data_out2(BYTE_WIDTH*(i+1) - 1 downto BYTE_WIDTH*i) <= q2_local(i);
	end generate unpack;

	process(clk)
	begin
		if(rising_edge(clk)) then
			if(we1 = '1') then
				-- edit this code if using other than four bytes per word
				if(be1(0) = '1') then
					ram(addr1)(0) := data_in1(BYTE_WIDTH-1 downto 0);
				end if;
				if be1(1) = '1' then
					ram(addr1)(1) := data_in1(2*BYTE_WIDTH-1 downto BYTE_WIDTH);
				end if;
				if be1(2) = '1' then
					ram(addr1)(2) := data_in1(3*BYTE_WIDTH-1 downto 2*BYTE_WIDTH);
				end if;
				if be1(3) = '1' then
					ram(addr1)(3) := data_in1(4*BYTE_WIDTH-1 downto 3*BYTE_WIDTH);
				end if;
			end if;
		end if;
	end process;

	process(clk)
	begin
		if(rising_edge(clk)) then
			q1_local <= ram(addr1);
		end if;
	end process;

	process(clk)
	begin
	if(rising_edge(clk)) then
		if(we2 = '1') then
			-- edit this code if using other than four bytes per word
			if(be2(0) = '1') then
				ram(addr2)(0) := data_in2(BYTE_WIDTH-1 downto 0);
			end if;
			if be2(1) = '1' then
				ram(addr2)(1) := data_in2(2*BYTE_WIDTH-1 downto BYTE_WIDTH);
			end if;
			if be2(2) = '1' then
				ram(addr2)(2) := data_in2(3*BYTE_WIDTH-1 downto 2*BYTE_WIDTH);
			end if;
			if be2(3) = '1' then
				ram(addr2)(3) := data_in2(4*BYTE_WIDTH-1 downto 3*BYTE_WIDTH);
			end if;
		end if;
	end if;
	end process;

	process(clk)
	begin
		if(rising_edge(clk)) then
			q2_local <= ram(addr2);
		end if;
	end process;


end rtl;
