# -*- mode: snippet -*-
# name: qps-Multiplier-with-One-Operand-from-Coefficient-ROM
# key: qps-DSP-Features-for-28-nm-Device-Multiplier-with-One-Operand-from-Coefficient-ROM
# group: qps DSP-Features-for-28-nm-Device
# --
// Multiplier with One Operand from Coefficient ROM
-- Quartus Prime VHDL Template
-- Multiplier with one operand from coefficient ROM
-- For use with the 28-nm device families

-- This template can be used with 18x18, sum-of-2 18x18, sum-of-4 18x18, 27x27, sum-of-2 27x27 modes on Stratix-V
-- This template can be used with 18x19(signed), sum-of-2 18x19(signed), 27x27 modes on Arria-V and Cyclone-V

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity input_coef is
	generic
	(
		A_WIDTH 	: natural := 17;
		COEF_WIDTH 	: natural := 18;
		-- up to 8 coefficients (3-bit address)
		SEL_WIDTH 	: natural := 3
	);

	port
	(
		a1	   	: in signed	((A_WIDTH-1) downto 0);
		a2	   	: in signed	((A_WIDTH-1) downto 0);
		c1_sel	: in std_logic_vector ((SEL_WIDTH)-1 downto 0);
		c2_sel	: in std_logic_vector ((SEL_WIDTH)-1 downto 0);
		-- DSP supports up to 3 clock/ena pairs and 2 async reset signals
		-- each registered data input can use independent {clock, ena}
		clock 	: in std_logic;
		ena		: in std_logic;
		-- all registered data input must use the same reset
		reset		: in std_logic;
		s			: out signed ((A_WIDTH + COEF_WIDTH) downto 0)
	);

end entity;

architecture rtl of input_coef is
-- This template use integer type as the coeffecient constant
-- Can use other preferred type for example signed/unsigned

-- Array type define for coef or ROM purpose
TYPE coef_type IS ARRAY(0 to ((2**SEL_WIDTH)-1))  of std_logic_vector((COEF_WIDTH-1) DOWNTO 0);

-- Coefficient storage (ROM inferencing template)
SIGNAL c1_coef : coef_type :=
			("110101111001110100",
			"001010100111101011",
			"001010111111101011",
			"001010111111101011",
			"001010000011101011",
			"001010110000001011",
			"001010111111101011",
			"001010111111101011");

signal c2_coef : coef_type :=
			("010101011010100100",
			"011010101110101010",
			"001010110111011011",
			"001010110101101010",
			"101010100011101011",
			"001011011000001010",
			"011010111111101011",
			"001010101001000110");

constant MULTIPLY_RESULT_WIDTH : natural := (A_WIDTH + COEF_WIDTH);


-- Two 18x18 in one DSP block must use coefficient storage simultaneously
signal a1_reg	   : signed	((A_WIDTH-1) downto 0);
signal a2_reg	   : signed	((A_WIDTH-1) downto 0);
signal c1_sel_reg	: std_logic_vector ((SEL_WIDTH)-1 downto 0);
signal c2_sel_reg	: std_logic_vector ((SEL_WIDTH)-1 downto 0);
signal c1_coef_wire	: signed ((COEF_WIDTH)-1 downto 0);
signal c2_coef_wire	: signed ((COEF_WIDTH)-1 downto 0);
signal p				: signed	((A_WIDTH+COEF_WIDTH) downto 0);


-- Pick an applicable basic mode template
component sum_of_2
	generic
	(
		A_WIDTH : natural := A_WIDTH;
		B_WIDTH : natural := COEF_WIDTH
	);

	port
	(
		a1	   : in signed	((A_WIDTH-1) downto 0);
		b1	   : in signed	((COEF_WIDTH-1) downto 0);
		a2	   : in signed	((A_WIDTH-1) downto 0);
		b2	   : in signed	((COEF_WIDTH-1) downto 0);
		p : out signed ((A_WIDTH+COEF_WIDTH) downto 0)
	);

end component;

begin

-- Register
process(clock, reset)
begin
	if (reset = '1') then

		a1_reg <= (others => '0');
		a2_reg <= (others => '0');
		c1_sel_reg <= (others => '0');
		c2_sel_reg <= (others => '0');

	elsif rising_edge(clock) then

		if (ena = '1') then
			a1_reg <= a1;
			a2_reg <= a2;
			c1_sel_reg <= c1_sel;
			c2_sel_reg <= c2_sel;
		end if;

	end if;
end process;

	s <= resize(p, (A_WIDTH+COEF_WIDTH+1));

	c1_coef_wire <= signed(c1_coef(to_integer(unsigned(c1_sel_reg))));
	c2_coef_wire <= signed(c2_coef(to_integer(unsigned(c2_sel_reg))));

	dsp0 : sum_of_2
	generic map
	(
		A_WIDTH => A_WIDTH,
		B_WIDTH => COEF_WIDTH
	)
	port MAP
	(
		a1	=> a1_reg,
		b1	=> c1_coef_wire,
		a2	=> a2_reg,
		b2	=> c2_coef_wire,
		p => p
	);
end rtl;
