# -*- mode: snippet -*-
# name: qps-Single-Multiplier-with-Preadder-and-Coefficent
# key: qps-DSP-Features-for-20-nm-Device-Single-Multiplier-with-Preadder-and-Coefficent
# --
// Single Multiplier with Preadder and Coefficent
-- Quartus Prime VHDL Template
-- m18x19_full mode by utilizing half DSP resource
-- Single multiplier with full registers (input, pipeline and output) + preadder + coefficients
-- Formula: final_output = (a+b)*c_coef
	-- Note: This mode does not support chainout adder, dynamic ACCUMULATE/LOADCONST/SUB/NEGATE.
-- For use with 20-nm device families
-- For more information on the 20nm DSP features, please refer to http://www.altera.com/literature/hb/arria-10/a10_dsp.pdf

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity single_mult_full_regs_preadd_coef is
	generic
	(
		-- This template will only work within the AxB data width range from 2x2 to 18x19.
		AB_WIDTH : natural := 18;
		COEF_WIDTH 	: natural := 18;
		-- up to 8 coefficients (3-bit address)
		SEL_WIDTH 	: natural := 3
	);

	port
	(
	-- Data input ports
		a	   : in signed	((AB_WIDTH-1) downto 0);
		b	   : in signed	((AB_WIDTH-1) downto 0);
		-- Coefficient selection ports. Selection of up to 8 coefficients (3-bit address)
		c_sel	: in std_logic_vector ((SEL_WIDTH)-1 downto 0);
		-- Register clock and control signals
		-- DSP supports up to 3 clock/ena pairs, and 2 async reset signals
		clock1	: in std_logic;
		clock2	: in std_logic;
		clock3	: in std_logic;
		ena1		: in std_logic;
		ena2		: in std_logic;
		ena3		: in std_logic;
		reset1	: in std_logic;
		reset2	: in std_logic;
		-- Output signal
		-- Max output width is 64
		final_output : out signed ((AB_WIDTH+COEF_WIDTH) downto 0)
	);

end entity;

architecture rtl of single_mult_full_regs_preadd_coef is
-- This template uses integer type as the coeffecient constant
-- Can use other preferred type, for example signed/unsigned

-- Array type define for coef or ROM purpose
TYPE coef_type IS ARRAY(0 to ((2**SEL_WIDTH)-1))  of std_logic_vector((COEF_WIDTH-1) DOWNTO 0);

-- Coefficient storage (ROM inferencing template)
SIGNAL c_coef : coef_type :=
			("110101111001110100",
			"001010100111101011",
			"001010111111101011",
			"101010111111101011",
			"001010000011010110",
			"111010110000001011",
			"001010111111010111",
			"001010111111101011");

-- Coefficient selection result
signal c_coef_wire	: signed ((COEF_WIDTH)-1 downto 0);

-- Preadder result
signal ab		   : signed	((AB_WIDTH) downto 0);

-- Data Input Register
signal a_reg	   : signed	((AB_WIDTH-1) downto 0);
signal b_reg	   : signed	((AB_WIDTH-1) downto 0);
signal c_sel_reg	: std_logic_vector ((SEL_WIDTH)-1 downto 0);

-- Data Input Pipeline Register
signal a_pipeline_reg   : signed	((AB_WIDTH-1) downto 0);
signal b_pipeline_reg	   : signed	((AB_WIDTH-1) downto 0);
signal c_sel_pipeline_reg	: std_logic_vector ((SEL_WIDTH)-1 downto 0);

-- Output Register
signal final_output_reg : signed ((AB_WIDTH+COEF_WIDTH) downto 0);

begin
	-- Data Input register
	-- DSP supports up to 3 clock/ena pairs and 2 async reset signals
	-- When preadder is used, the inputs to the preadder must use the same {clock, ena}
	-- The coefficient select input may use a different clock than that of the preadder inputs.
-- All registered inputs must use the same reset
	process(clock1, reset1)
	begin
		if (reset1 = '1') then
			a_reg <= (others => '0');
			b_reg <= (others => '0');
			c_sel_reg <= (others => '0');
		elsif rising_edge(clock1) then

			if (ena1 = '1') then
				a_reg <= a;
				b_reg <= b;
				c_sel_reg <= c_sel;
			end if;

		end if;

	end process;

	-- Input pipeline register
	-- All pipeline registers must use the same {clock, ena, reset}
	-- The Pipeline register must use the same reset as the output register
	process(clock2, reset2)
	begin
		if (reset2 = '1') then
			a_pipeline_reg <= (others => '0');
			b_pipeline_reg <= (others => '0');
			c_sel_pipeline_reg <= (others => '0');
		elsif rising_edge(clock2) then

			if (ena2 = '1') then
				a_pipeline_reg <= a_reg;
				b_pipeline_reg <= b_reg;
				c_sel_pipeline_reg <= c_sel_reg;
			end if;

		end if;

	end process;

-- Output register
	-- Output register must share the same reset with input pipeline register
	process(clock3, reset2)
	begin
		if (reset2 = '1') then
			final_output_reg <= (others => '0');

		elsif rising_edge(clock3) then

			if (ena3 = '1') then
			-- Static add/sub is supported
				final_output_reg <= resize(c_coef_wire,COEF_WIDTH) * resize(ab,AB_WIDTH+1);
			end if;

		end if;
	end process;

	-- Preadder
	-- Preadder supports static add/sub
	ab <= resize(a_pipeline_reg, AB_WIDTH+1) + resize(b_pipeline_reg, AB_WIDTH+1);

	-- Coefficients
	c_coef_wire <= signed(c_coef(to_integer(unsigned(c_sel_pipeline_reg))));

	-- Final output
final_output <= final_output_reg;

end rtl;
